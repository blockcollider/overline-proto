// source: wireless.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bc.wireless.WirelessBcBlock', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessBlockchainHeader', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessBlockchainHeaders', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessMarkedTransaction', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessOutPoint', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessTransaction', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessTransactionInput', null, global);
goog.exportSymbol('proto.bc.wireless.WirelessTransactionOutput', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessBcBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.wireless.WirelessBcBlock.repeatedFields_, null);
};
goog.inherits(proto.bc.wireless.WirelessBcBlock, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessBcBlock.displayName = 'proto.bc.wireless.WirelessBcBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessBlockchainHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.wireless.WirelessBlockchainHeaders.repeatedFields_, null);
};
goog.inherits(proto.bc.wireless.WirelessBlockchainHeaders, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessBlockchainHeaders.displayName = 'proto.bc.wireless.WirelessBlockchainHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessBlockchainHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.wireless.WirelessBlockchainHeader.repeatedFields_, null);
};
goog.inherits(proto.bc.wireless.WirelessBlockchainHeader, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessBlockchainHeader.displayName = 'proto.bc.wireless.WirelessBlockchainHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessMarkedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.wireless.WirelessMarkedTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessMarkedTransaction.displayName = 'proto.bc.wireless.WirelessMarkedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.wireless.WirelessTransaction.repeatedFields_, null);
};
goog.inherits(proto.bc.wireless.WirelessTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessTransaction.displayName = 'proto.bc.wireless.WirelessTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessTransactionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.wireless.WirelessTransactionInput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessTransactionInput.displayName = 'proto.bc.wireless.WirelessTransactionInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessOutPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.wireless.WirelessOutPoint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessOutPoint.displayName = 'proto.bc.wireless.WirelessOutPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.wireless.WirelessTransactionOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.wireless.WirelessTransactionOutput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.wireless.WirelessTransactionOutput.displayName = 'proto.bc.wireless.WirelessTransactionOutput';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.wireless.WirelessBcBlock.repeatedFields_ = [16,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessBcBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessBcBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessBcBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBcBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    previousHash: msg.getPreviousHash_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    schemaVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    miner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    difficulty: msg.getDifficulty_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    merkleRoot: msg.getMerkleRoot_asB64(),
    chainRoot: msg.getChainRoot_asB64(),
    distance: msg.getDistance_asB64(),
    totalDistance: msg.getTotalDistance_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 13, ""),
    nrgGrant: jspb.Message.getFieldWithDefault(msg, 14, 0),
    twn: jspb.Message.getFieldWithDefault(msg, 15, 0),
    twsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    emblemWeight: jspb.Message.getFieldWithDefault(msg, 17, 0),
    emblemChainFingerprintRoot: jspb.Message.getFieldWithDefault(msg, 18, ""),
    emblemChainAddress: jspb.Message.getFieldWithDefault(msg, 19, ""),
    txCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.bc.wireless.WirelessTransaction.toObject, includeInstance),
    txFeeBase: jspb.Message.getFieldWithDefault(msg, 22, 0),
    txDistanceSumLimit: jspb.Message.getFieldWithDefault(msg, 23, 0),
    blockchainHeadersCount: jspb.Message.getFieldWithDefault(msg, 24, 0),
    blockchainHeaders: (f = msg.getBlockchainHeaders()) && proto.bc.wireless.WirelessBlockchainHeaders.toObject(includeInstance, f),
    blockchainFingerprintsRoot: msg.getBlockchainFingerprintsRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessBcBlock}
 */
proto.bc.wireless.WirelessBcBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessBcBlock;
  return proto.bc.wireless.WirelessBcBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessBcBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessBcBlock}
 */
proto.bc.wireless.WirelessBcBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSchemaVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDifficulty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerkleRoot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainRoot(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDistance(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalDistance(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNrgGrant(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTwn(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addTws(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEmblemWeight(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmblemChainFingerprintRoot(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmblemChainAddress(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxCount(value);
      break;
    case 21:
      var value = new proto.bc.wireless.WirelessTransaction;
      reader.readMessage(value,proto.bc.wireless.WirelessTransaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxFeeBase(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxDistanceSumLimit(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockchainHeadersCount(value);
      break;
    case 25:
      var value = new proto.bc.wireless.WirelessBlockchainHeaders;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeaders.deserializeBinaryFromReader);
      msg.setBlockchainHeaders(value);
      break;
    case 26:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockchainFingerprintsRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessBcBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessBcBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBcBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPreviousHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSchemaVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDifficulty_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getChainRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getDistance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getTotalDistance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getNrgGrant();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getTwn();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getTwsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getEmblemWeight();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getEmblemChainFingerprintRoot();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getEmblemChainAddress();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.bc.wireless.WirelessTransaction.serializeBinaryToWriter
    );
  }
  f = message.getTxFeeBase();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getTxDistanceSumLimit();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getBlockchainHeadersCount();
  if (f !== 0) {
    writer.writeUint64(
      24,
      f
    );
  }
  f = message.getBlockchainHeaders();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.bc.wireless.WirelessBlockchainHeaders.serializeBinaryToWriter
    );
  }
  f = message.getBlockchainFingerprintsRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      26,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes previous_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getPreviousHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes previous_hash = 2;
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getPreviousHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousHash()));
};


/**
 * optional bytes previous_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getPreviousHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 schema_version = 4;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getSchemaVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setSchemaVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string miner = 6;
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes difficulty = 7;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDifficulty = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes difficulty = 7;
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDifficulty_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDifficulty()));
};


/**
 * optional bytes difficulty = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDifficulty_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDifficulty()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 timestamp = 8;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes merkle_root = 9;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes merkle_root = 9;
 * This is a type-conversion wrapper around `getMerkleRoot()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerkleRoot()));
};


/**
 * optional bytes merkle_root = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes chain_root = 10;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getChainRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes chain_root = 10;
 * This is a type-conversion wrapper around `getChainRoot()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getChainRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainRoot()));
};


/**
 * optional bytes chain_root = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainRoot()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getChainRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setChainRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes distance = 11;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDistance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes distance = 11;
 * This is a type-conversion wrapper around `getDistance()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDistance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDistance()));
};


/**
 * optional bytes distance = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDistance()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getDistance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDistance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setDistance = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes total_distance = 12;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTotalDistance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes total_distance = 12;
 * This is a type-conversion wrapper around `getTotalDistance()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTotalDistance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalDistance()));
};


/**
 * optional bytes total_distance = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalDistance()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTotalDistance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalDistance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTotalDistance = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional string nonce = 13;
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint64 nrg_grant = 14;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getNrgGrant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setNrgGrant = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 twn = 15;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTwn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTwn = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated string tws = 16;
 * @return {!Array<string>}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTwsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTwsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.addTws = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.clearTwsList = function() {
  return this.setTwsList([]);
};


/**
 * optional uint64 emblem_weight = 17;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getEmblemWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setEmblemWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string emblem_chain_fingerprint_root = 18;
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getEmblemChainFingerprintRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setEmblemChainFingerprintRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string emblem_chain_address = 19;
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getEmblemChainAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setEmblemChainAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint64 tx_count = 20;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * repeated WirelessTransaction txs = 21;
 * @return {!Array<!proto.bc.wireless.WirelessTransaction>}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessTransaction, 21));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessTransaction>} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
*/
proto.bc.wireless.WirelessBcBlock.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.bc.wireless.WirelessTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessTransaction}
 */
proto.bc.wireless.WirelessBcBlock.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.bc.wireless.WirelessTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional uint64 tx_fee_base = 22;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTxFeeBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTxFeeBase = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint64 tx_distance_sum_limit = 23;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getTxDistanceSumLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setTxDistanceSumLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint64 blockchain_headers_count = 24;
 * @return {number}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getBlockchainHeadersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setBlockchainHeadersCount = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional WirelessBlockchainHeaders blockchain_headers = 25;
 * @return {?proto.bc.wireless.WirelessBlockchainHeaders}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getBlockchainHeaders = function() {
  return /** @type{?proto.bc.wireless.WirelessBlockchainHeaders} */ (
    jspb.Message.getWrapperField(this, proto.bc.wireless.WirelessBlockchainHeaders, 25));
};


/**
 * @param {?proto.bc.wireless.WirelessBlockchainHeaders|undefined} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
*/
proto.bc.wireless.WirelessBcBlock.prototype.setBlockchainHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.clearBlockchainHeaders = function() {
  return this.setBlockchainHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.wireless.WirelessBcBlock.prototype.hasBlockchainHeaders = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional bytes blockchain_fingerprints_root = 26;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getBlockchainFingerprintsRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * optional bytes blockchain_fingerprints_root = 26;
 * This is a type-conversion wrapper around `getBlockchainFingerprintsRoot()`
 * @return {string}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getBlockchainFingerprintsRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockchainFingerprintsRoot()));
};


/**
 * optional bytes blockchain_fingerprints_root = 26;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockchainFingerprintsRoot()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBcBlock.prototype.getBlockchainFingerprintsRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockchainFingerprintsRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessBcBlock} returns this
 */
proto.bc.wireless.WirelessBcBlock.prototype.setBlockchainFingerprintsRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 26, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.wireless.WirelessBlockchainHeaders.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessBlockchainHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessBlockchainHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBlockchainHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    btcList: jspb.Message.toObjectList(msg.getBtcList(),
    proto.bc.wireless.WirelessBlockchainHeader.toObject, includeInstance),
    ethList: jspb.Message.toObjectList(msg.getEthList(),
    proto.bc.wireless.WirelessBlockchainHeader.toObject, includeInstance),
    lskList: jspb.Message.toObjectList(msg.getLskList(),
    proto.bc.wireless.WirelessBlockchainHeader.toObject, includeInstance),
    neoList: jspb.Message.toObjectList(msg.getNeoList(),
    proto.bc.wireless.WirelessBlockchainHeader.toObject, includeInstance),
    wavList: jspb.Message.toObjectList(msg.getWavList(),
    proto.bc.wireless.WirelessBlockchainHeader.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders}
 */
proto.bc.wireless.WirelessBlockchainHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessBlockchainHeaders;
  return proto.bc.wireless.WirelessBlockchainHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessBlockchainHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders}
 */
proto.bc.wireless.WirelessBlockchainHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.wireless.WirelessBlockchainHeader;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader);
      msg.addBtc(value);
      break;
    case 2:
      var value = new proto.bc.wireless.WirelessBlockchainHeader;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader);
      msg.addEth(value);
      break;
    case 3:
      var value = new proto.bc.wireless.WirelessBlockchainHeader;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader);
      msg.addLsk(value);
      break;
    case 4:
      var value = new proto.bc.wireless.WirelessBlockchainHeader;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader);
      msg.addNeo(value);
      break;
    case 5:
      var value = new proto.bc.wireless.WirelessBlockchainHeader;
      reader.readMessage(value,proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader);
      msg.addWav(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessBlockchainHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessBlockchainHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBlockchainHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBtcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getEthList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getLskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getNeoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getWavList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WirelessBlockchainHeader btc = 1;
 * @return {!Array<!proto.bc.wireless.WirelessBlockchainHeader>}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.getBtcList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessBlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessBlockchainHeader, 1));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessBlockchainHeader>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
*/
proto.bc.wireless.WirelessBlockchainHeaders.prototype.setBtcList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.wireless.WirelessBlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.addBtc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.wireless.WirelessBlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.clearBtcList = function() {
  return this.setBtcList([]);
};


/**
 * repeated WirelessBlockchainHeader eth = 2;
 * @return {!Array<!proto.bc.wireless.WirelessBlockchainHeader>}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.getEthList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessBlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessBlockchainHeader, 2));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessBlockchainHeader>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
*/
proto.bc.wireless.WirelessBlockchainHeaders.prototype.setEthList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bc.wireless.WirelessBlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.addEth = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bc.wireless.WirelessBlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.clearEthList = function() {
  return this.setEthList([]);
};


/**
 * repeated WirelessBlockchainHeader lsk = 3;
 * @return {!Array<!proto.bc.wireless.WirelessBlockchainHeader>}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.getLskList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessBlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessBlockchainHeader, 3));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessBlockchainHeader>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
*/
proto.bc.wireless.WirelessBlockchainHeaders.prototype.setLskList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bc.wireless.WirelessBlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.addLsk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bc.wireless.WirelessBlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.clearLskList = function() {
  return this.setLskList([]);
};


/**
 * repeated WirelessBlockchainHeader neo = 4;
 * @return {!Array<!proto.bc.wireless.WirelessBlockchainHeader>}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.getNeoList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessBlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessBlockchainHeader, 4));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessBlockchainHeader>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
*/
proto.bc.wireless.WirelessBlockchainHeaders.prototype.setNeoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bc.wireless.WirelessBlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.addNeo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.wireless.WirelessBlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.clearNeoList = function() {
  return this.setNeoList([]);
};


/**
 * repeated WirelessBlockchainHeader wav = 5;
 * @return {!Array<!proto.bc.wireless.WirelessBlockchainHeader>}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.getWavList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessBlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessBlockchainHeader, 5));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessBlockchainHeader>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
*/
proto.bc.wireless.WirelessBlockchainHeaders.prototype.setWavList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bc.wireless.WirelessBlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.addWav = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bc.wireless.WirelessBlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeaders} returns this
 */
proto.bc.wireless.WirelessBlockchainHeaders.prototype.clearWavList = function() {
  return this.setWavList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.wireless.WirelessBlockchainHeader.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessBlockchainHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessBlockchainHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBlockchainHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockchainConfirmationsInParentCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    markedTxsList: jspb.Message.toObjectList(msg.getMarkedTxsList(),
    proto.bc.wireless.WirelessMarkedTransaction.toObject, includeInstance),
    markedTxCount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessBlockchainHeader;
  return proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessBlockchainHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessBlockchainHeader}
 */
proto.bc.wireless.WirelessBlockchainHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleRoot(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockchainConfirmationsInParentCount(value);
      break;
    case 8:
      var value = new proto.bc.wireless.WirelessMarkedTransaction;
      reader.readMessage(value,proto.bc.wireless.WirelessMarkedTransaction.deserializeBinaryFromReader);
      msg.addMarkedTxs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarkedTxCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessBlockchainHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessBlockchainHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockchainConfirmationsInParentCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMarkedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.wireless.WirelessMarkedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getMarkedTxCount();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string previous_hash = 3;
 * @return {string}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getMerkleRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 blockchain_confirmations_in_parent_count = 7;
 * @return {number}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getBlockchainConfirmationsInParentCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setBlockchainConfirmationsInParentCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated WirelessMarkedTransaction marked_txs = 8;
 * @return {!Array<!proto.bc.wireless.WirelessMarkedTransaction>}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getMarkedTxsList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessMarkedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessMarkedTransaction, 8));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessMarkedTransaction>} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
*/
proto.bc.wireless.WirelessBlockchainHeader.prototype.setMarkedTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.wireless.WirelessMarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessMarkedTransaction}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.addMarkedTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.wireless.WirelessMarkedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.clearMarkedTxsList = function() {
  return this.setMarkedTxsList([]);
};


/**
 * optional uint64 marked_tx_count = 9;
 * @return {number}
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.getMarkedTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessBlockchainHeader} returns this
 */
proto.bc.wireless.WirelessBlockchainHeader.prototype.setMarkedTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessMarkedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessMarkedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessMarkedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addrFrom: jspb.Message.getFieldWithDefault(msg, 5, ""),
    addrTo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    index: jspb.Message.getFieldWithDefault(msg, 8, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessMarkedTransaction}
 */
proto.bc.wireless.WirelessMarkedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessMarkedTransaction;
  return proto.bc.wireless.WirelessMarkedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessMarkedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessMarkedTransaction}
 */
proto.bc.wireless.WirelessMarkedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrFrom(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrTo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessMarkedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessMarkedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessMarkedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddrFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAddrTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string addr_from = 5;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getAddrFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setAddrFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string addr_to = 6;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getAddrTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setAddrTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 block_height = 7;
 * @return {number}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 index = 8;
 * @return {number}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string block_hash = 9;
 * @return {string}
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessMarkedTransaction} returns this
 */
proto.bc.wireless.WirelessMarkedTransaction.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.wireless.WirelessTransaction.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: msg.getHash_asB64(),
    overline: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ninCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    noutCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.bc.wireless.WirelessTransactionInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.bc.wireless.WirelessTransactionOutput.toObject, includeInstance),
    lockTime: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessTransaction}
 */
proto.bc.wireless.WirelessTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessTransaction;
  return proto.bc.wireless.WirelessTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessTransaction}
 */
proto.bc.wireless.WirelessTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverline(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNinCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNoutCount(value);
      break;
    case 7:
      var value = new proto.bc.wireless.WirelessTransactionInput;
      reader.readMessage(value,proto.bc.wireless.WirelessTransactionInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 8:
      var value = new proto.bc.wireless.WirelessTransactionOutput;
      reader.readMessage(value,proto.bc.wireless.WirelessTransactionOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOverline();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNinCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNoutCount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.bc.wireless.WirelessTransactionInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.wireless.WirelessTransactionOutput.serializeBinaryToWriter
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.wireless.WirelessTransaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.bc.wireless.WirelessTransaction.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessTransaction.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.bc.wireless.WirelessTransaction.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransaction.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string overline = 4;
 * @return {string}
 */
proto.bc.wireless.WirelessTransaction.prototype.getOverline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setOverline = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 nin_count = 5;
 * @return {number}
 */
proto.bc.wireless.WirelessTransaction.prototype.getNinCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setNinCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 nout_count = 6;
 * @return {number}
 */
proto.bc.wireless.WirelessTransaction.prototype.getNoutCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setNoutCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated WirelessTransactionInput inputs = 7;
 * @return {!Array<!proto.bc.wireless.WirelessTransactionInput>}
 */
proto.bc.wireless.WirelessTransaction.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessTransactionInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessTransactionInput, 7));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessTransactionInput>} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
*/
proto.bc.wireless.WirelessTransaction.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.bc.wireless.WirelessTransactionInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessTransactionInput}
 */
proto.bc.wireless.WirelessTransaction.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bc.wireless.WirelessTransactionInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated WirelessTransactionOutput outputs = 8;
 * @return {!Array<!proto.bc.wireless.WirelessTransactionOutput>}
 */
proto.bc.wireless.WirelessTransaction.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.bc.wireless.WirelessTransactionOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.wireless.WirelessTransactionOutput, 8));
};


/**
 * @param {!Array<!proto.bc.wireless.WirelessTransactionOutput>} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
*/
proto.bc.wireless.WirelessTransaction.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.wireless.WirelessTransactionOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.wireless.WirelessTransactionOutput}
 */
proto.bc.wireless.WirelessTransaction.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.wireless.WirelessTransactionOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional uint32 lock_time = 9;
 * @return {number}
 */
proto.bc.wireless.WirelessTransaction.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransaction} returns this
 */
proto.bc.wireless.WirelessTransaction.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessTransactionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessTransactionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransactionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    outPoint: (f = msg.getOutPoint()) && proto.bc.wireless.WirelessOutPoint.toObject(includeInstance, f),
    scriptLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inputScript: msg.getInputScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessTransactionInput}
 */
proto.bc.wireless.WirelessTransactionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessTransactionInput;
  return proto.bc.wireless.WirelessTransactionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessTransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessTransactionInput}
 */
proto.bc.wireless.WirelessTransactionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.wireless.WirelessOutPoint;
      reader.readMessage(value,proto.bc.wireless.WirelessOutPoint.deserializeBinaryFromReader);
      msg.setOutPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScriptLength(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInputScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessTransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessTransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransactionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.wireless.WirelessOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional WirelessOutPoint out_point = 1;
 * @return {?proto.bc.wireless.WirelessOutPoint}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.getOutPoint = function() {
  return /** @type{?proto.bc.wireless.WirelessOutPoint} */ (
    jspb.Message.getWrapperField(this, proto.bc.wireless.WirelessOutPoint, 1));
};


/**
 * @param {?proto.bc.wireless.WirelessOutPoint|undefined} value
 * @return {!proto.bc.wireless.WirelessTransactionInput} returns this
*/
proto.bc.wireless.WirelessTransactionInput.prototype.setOutPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.wireless.WirelessTransactionInput} returns this
 */
proto.bc.wireless.WirelessTransactionInput.prototype.clearOutPoint = function() {
  return this.setOutPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.hasOutPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 script_length = 2;
 * @return {number}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.getScriptLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransactionInput} returns this
 */
proto.bc.wireless.WirelessTransactionInput.prototype.setScriptLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes input_script = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.getInputScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes input_script = 3;
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {string}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.getInputScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInputScript()));
};


/**
 * optional bytes input_script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionInput.prototype.getInputScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInputScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessTransactionInput} returns this
 */
proto.bc.wireless.WirelessTransactionInput.prototype.setInputScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessOutPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessOutPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessOutPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessOutPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    hash: msg.getHash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessOutPoint}
 */
proto.bc.wireless.WirelessOutPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessOutPoint;
  return proto.bc.wireless.WirelessOutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessOutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessOutPoint}
 */
proto.bc.wireless.WirelessOutPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessOutPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessOutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessOutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessOutPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessOutPoint} returns this
 */
proto.bc.wireless.WirelessOutPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessOutPoint} returns this
 */
proto.bc.wireless.WirelessOutPoint.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.bc.wireless.WirelessOutPoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessOutPoint} returns this
 */
proto.bc.wireless.WirelessOutPoint.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.wireless.WirelessTransactionOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.wireless.WirelessTransactionOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransactionOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    unit: msg.getUnit_asB64(),
    scriptLength: jspb.Message.getFieldWithDefault(msg, 3, 0),
    outputScript: msg.getOutputScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.wireless.WirelessTransactionOutput}
 */
proto.bc.wireless.WirelessTransactionOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.wireless.WirelessTransactionOutput;
  return proto.bc.wireless.WirelessTransactionOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.wireless.WirelessTransactionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.wireless.WirelessTransactionOutput}
 */
proto.bc.wireless.WirelessTransactionOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScriptLength(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutputScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.wireless.WirelessTransactionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.wireless.WirelessTransactionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.wireless.WirelessTransactionOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUnit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOutputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessTransactionOutput} returns this
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes unit = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getUnit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes unit = 2;
 * This is a type-conversion wrapper around `getUnit()`
 * @return {string}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getUnit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnit()));
};


/**
 * optional bytes unit = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnit()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getUnit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessTransactionOutput} returns this
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.setUnit = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 script_length = 3;
 * @return {number}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getScriptLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.wireless.WirelessTransactionOutput} returns this
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.setScriptLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes output_script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getOutputScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes output_script = 4;
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {string}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getOutputScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutputScript()));
};


/**
 * optional bytes output_script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {!Uint8Array}
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.getOutputScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutputScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.wireless.WirelessTransactionOutput} returns this
 */
proto.bc.wireless.WirelessTransactionOutput.prototype.setOutputScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.bc.wireless);
