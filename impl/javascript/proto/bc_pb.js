// source: bc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
goog.exportSymbol('proto.bc.exchange.CurrentWork', null, global);
goog.exportSymbol('proto.bc.exchange.GetBalanceRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetBalanceResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlake2blRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlake2blResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlockHashRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlockHeightRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlocksRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetBlocksResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetByteFeeResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetEmbBalanceResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetHistoricalOrdersResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetHistoryRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetMarkedTxRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetMarkedTxs', null, global);
goog.exportSymbol('proto.bc.exchange.GetMatchedOrdersResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetNrgSupplyResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetOpenOrdersResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetOutPointRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetOutPointStatusResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetRawMempoolResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetRoveredBlockHashRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetRoveredBlockHeightRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetRoveredBlocksRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetRoveredBlocksResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetSpendableCollateralRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetSpendableCollateralResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetTradeStatusResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetTxRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetUnlockTakerTxParamsRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetUnlockTakerTxParamsResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetUtxoLengthRequest', null, global);
goog.exportSymbol('proto.bc.exchange.GetUtxoLengthResponse', null, global);
goog.exportSymbol('proto.bc.exchange.GetUtxosRequest', null, global);
goog.exportSymbol('proto.bc.exchange.HelpResponse', null, global);
goog.exportSymbol('proto.bc.exchange.MakerOrderInfo', null, global);
goog.exportSymbol('proto.bc.exchange.MatchedOrderInfo', null, global);
goog.exportSymbol('proto.bc.exchange.RpcFeedTransaction', null, global);
goog.exportSymbol('proto.bc.exchange.RpcTransaction', null, global);
goog.exportSymbol('proto.bc.exchange.RpcTransactionResponse', null, global);
goog.exportSymbol('proto.bc.exchange.RpcTransactionResponseStatus', null, global);
goog.exportSymbol('proto.bc.exchange.RpcUpdateFeedTransaction', null, global);
goog.exportSymbol('proto.bc.exchange.SettingsResponse', null, global);
goog.exportSymbol('proto.bc.exchange.StatsResponse', null, global);
goog.exportSymbol('proto.bc.exchange.SyncStatus', null, global);
goog.exportSymbol('proto.bc.exchange.TakerOrder', null, global);
goog.exportSymbol('proto.bc.exchange.TakerOrderInfo', null, global);
goog.exportSymbol('proto.bc.exchange.Transfer', null, global);
goog.exportSymbol('proto.bc.exchange.TransferRequest', null, global);
goog.exportSymbol('proto.bc.exchange.TransferResponse', null, global);
goog.exportSymbol('proto.bc.exchange.VanityConvertRequest', null, global);
goog.exportSymbol('proto.bc.exchange.VanityConvertResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.HelpResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.HelpResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.HelpResponse.displayName = 'proto.bc.exchange.HelpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.StatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.StatsResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.StatsResponse.displayName = 'proto.bc.exchange.StatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.RpcTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.RpcTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.RpcTransaction.displayName = 'proto.bc.exchange.RpcTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.RpcFeedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.RpcFeedTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.RpcFeedTransaction.displayName = 'proto.bc.exchange.RpcFeedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.RpcUpdateFeedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.RpcUpdateFeedTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.RpcUpdateFeedTransaction.displayName = 'proto.bc.exchange.RpcUpdateFeedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.RpcTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.RpcTransactionResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.RpcTransactionResponse.displayName = 'proto.bc.exchange.RpcTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.Transfer, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.Transfer.displayName = 'proto.bc.exchange.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.TransferRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.TransferRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.TransferRequest.displayName = 'proto.bc.exchange.TransferRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetHistoryRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetHistoryRequest.displayName = 'proto.bc.exchange.GetHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.TransferResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.TransferResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.TransferResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.TransferResponse.displayName = 'proto.bc.exchange.TransferResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetUtxoLengthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetUtxoLengthRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetUtxoLengthRequest.displayName = 'proto.bc.exchange.GetUtxoLengthRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetUtxosRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetUtxosRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetUtxosRequest.displayName = 'proto.bc.exchange.GetUtxosRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetUtxoLengthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetUtxoLengthResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetUtxoLengthResponse.displayName = 'proto.bc.exchange.GetUtxoLengthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetSpendableCollateralRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetSpendableCollateralRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetSpendableCollateralRequest.displayName = 'proto.bc.exchange.GetSpendableCollateralRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetSpendableCollateralResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetSpendableCollateralResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetSpendableCollateralResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetSpendableCollateralResponse.displayName = 'proto.bc.exchange.GetSpendableCollateralResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBalanceRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBalanceRequest.displayName = 'proto.bc.exchange.GetBalanceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetEmbBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetEmbBalanceResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetEmbBalanceResponse.displayName = 'proto.bc.exchange.GetEmbBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetByteFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetByteFeeResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetByteFeeResponse.displayName = 'proto.bc.exchange.GetByteFeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBalanceResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBalanceResponse.displayName = 'proto.bc.exchange.GetBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetUnlockTakerTxParamsRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetUnlockTakerTxParamsRequest.displayName = 'proto.bc.exchange.GetUnlockTakerTxParamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetUnlockTakerTxParamsResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetUnlockTakerTxParamsResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetUnlockTakerTxParamsResponse.displayName = 'proto.bc.exchange.GetUnlockTakerTxParamsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.MakerOrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.MakerOrderInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.MakerOrderInfo.displayName = 'proto.bc.exchange.MakerOrderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.TakerOrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.TakerOrderInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.TakerOrderInfo.displayName = 'proto.bc.exchange.TakerOrderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.MatchedOrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.MatchedOrderInfo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.MatchedOrderInfo.displayName = 'proto.bc.exchange.MatchedOrderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetOpenOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetOpenOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetOpenOrdersResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetOpenOrdersResponse.displayName = 'proto.bc.exchange.GetOpenOrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetMatchedOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetMatchedOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetMatchedOrdersResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetMatchedOrdersResponse.displayName = 'proto.bc.exchange.GetMatchedOrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetHistoricalOrdersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetHistoricalOrdersResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetHistoricalOrdersResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetHistoricalOrdersResponse.displayName = 'proto.bc.exchange.GetHistoricalOrdersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.TakerOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.TakerOrder, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.TakerOrder.displayName = 'proto.bc.exchange.TakerOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlake2blRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBlake2blRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlake2blRequest.displayName = 'proto.bc.exchange.GetBlake2blRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlake2blResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBlake2blResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlake2blResponse.displayName = 'proto.bc.exchange.GetBlake2blResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.VanityConvertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.VanityConvertRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.VanityConvertRequest.displayName = 'proto.bc.exchange.VanityConvertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.VanityConvertResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.VanityConvertResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.VanityConvertResponse.displayName = 'proto.bc.exchange.VanityConvertResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetRoveredBlockHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetRoveredBlockHashRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetRoveredBlockHashRequest.displayName = 'proto.bc.exchange.GetRoveredBlockHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetRoveredBlockHeightRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetRoveredBlockHeightRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetRoveredBlockHeightRequest.displayName = 'proto.bc.exchange.GetRoveredBlockHeightRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlockHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBlockHashRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlockHashRequest.displayName = 'proto.bc.exchange.GetBlockHashRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlockHeightRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBlockHeightRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlockHeightRequest.displayName = 'proto.bc.exchange.GetBlockHeightRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetBlocksRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlocksRequest.displayName = 'proto.bc.exchange.GetBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetBlocksResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetBlocksResponse.displayName = 'proto.bc.exchange.GetBlocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetRoveredBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetRoveredBlocksRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetRoveredBlocksRequest.displayName = 'proto.bc.exchange.GetRoveredBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetRawMempoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetRawMempoolResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetRawMempoolResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetRawMempoolResponse.displayName = 'proto.bc.exchange.GetRawMempoolResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetRoveredBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetRoveredBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetRoveredBlocksResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetRoveredBlocksResponse.displayName = 'proto.bc.exchange.GetRoveredBlocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetTxRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetTxRequest.displayName = 'proto.bc.exchange.GetTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetMarkedTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetMarkedTxRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetMarkedTxRequest.displayName = 'proto.bc.exchange.GetMarkedTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetOutPointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetOutPointRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetOutPointRequest.displayName = 'proto.bc.exchange.GetOutPointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetTradeStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetTradeStatusResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetTradeStatusResponse.displayName = 'proto.bc.exchange.GetTradeStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetOutPointStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetOutPointStatusResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetOutPointStatusResponse.displayName = 'proto.bc.exchange.GetOutPointStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.CurrentWork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.CurrentWork, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.CurrentWork.displayName = 'proto.bc.exchange.CurrentWork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.SyncStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.SyncStatus, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.SyncStatus.displayName = 'proto.bc.exchange.SyncStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.SettingsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.SettingsResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.SettingsResponse.displayName = 'proto.bc.exchange.SettingsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetNrgSupplyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.exchange.GetNrgSupplyResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetNrgSupplyResponse.displayName = 'proto.bc.exchange.GetNrgSupplyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.exchange.GetMarkedTxs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.exchange.GetMarkedTxs.repeatedFields_, null);
};
goog.inherits(proto.bc.exchange.GetMarkedTxs, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.exchange.GetMarkedTxs.displayName = 'proto.bc.exchange.GetMarkedTxs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.HelpResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.HelpResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.HelpResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.HelpResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    helpText: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.HelpResponse}
 */
proto.bc.exchange.HelpResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.HelpResponse;
  return proto.bc.exchange.HelpResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.HelpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.HelpResponse}
 */
proto.bc.exchange.HelpResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHelpText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.HelpResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.HelpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.HelpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.HelpResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHelpText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string help_text = 1;
 * @return {string}
 */
proto.bc.exchange.HelpResponse.prototype.getHelpText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.HelpResponse} returns this
 */
proto.bc.exchange.HelpResponse.prototype.setHelpText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.StatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.StatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.StatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.StatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    calls: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latestGpuMinerUpdate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.StatsResponse}
 */
proto.bc.exchange.StatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.StatsResponse;
  return proto.bc.exchange.StatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.StatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.StatsResponse}
 */
proto.bc.exchange.StatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCalls(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestGpuMinerUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.StatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.StatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.StatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.StatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCalls();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLatestGpuMinerUpdate();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional int64 calls = 1;
 * @return {number}
 */
proto.bc.exchange.StatsResponse.prototype.getCalls = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.StatsResponse} returns this
 */
proto.bc.exchange.StatsResponse.prototype.setCalls = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 latest_gpu_miner_update = 2;
 * @return {number}
 */
proto.bc.exchange.StatsResponse.prototype.getLatestGpuMinerUpdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.StatsResponse} returns this
 */
proto.bc.exchange.StatsResponse.prototype.setLatestGpuMinerUpdate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.RpcTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.RpcTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.RpcTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 4, ""),
    privateKeyHex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.RpcTransaction}
 */
proto.bc.exchange.RpcTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.RpcTransaction;
  return proto.bc.exchange.RpcTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.RpcTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.RpcTransaction}
 */
proto.bc.exchange.RpcTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKeyHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.RpcTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.RpcTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.RpcTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string from_addr = 1;
 * @return {string}
 */
proto.bc.exchange.RpcTransaction.prototype.getFromAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransaction} returns this
 */
proto.bc.exchange.RpcTransaction.prototype.setFromAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to_addr = 2;
 * @return {string}
 */
proto.bc.exchange.RpcTransaction.prototype.getToAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransaction} returns this
 */
proto.bc.exchange.RpcTransaction.prototype.setToAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.bc.exchange.RpcTransaction.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransaction} returns this
 */
proto.bc.exchange.RpcTransaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tx_fee = 4;
 * @return {string}
 */
proto.bc.exchange.RpcTransaction.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransaction} returns this
 */
proto.bc.exchange.RpcTransaction.prototype.setTxFee = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string private_key_hex = 5;
 * @return {string}
 */
proto.bc.exchange.RpcTransaction.prototype.getPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransaction} returns this
 */
proto.bc.exchange.RpcTransaction.prototype.setPrivateKeyHex = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.RpcFeedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.RpcFeedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcFeedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    feedAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 4, ""),
    privateKeyHex: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.RpcFeedTransaction}
 */
proto.bc.exchange.RpcFeedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.RpcFeedTransaction;
  return proto.bc.exchange.RpcFeedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.RpcFeedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.RpcFeedTransaction}
 */
proto.bc.exchange.RpcFeedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedAddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKeyHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.RpcFeedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.RpcFeedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcFeedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeedAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string owner_addr = 1;
 * @return {string}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.getOwnerAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcFeedTransaction} returns this
 */
proto.bc.exchange.RpcFeedTransaction.prototype.setOwnerAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feed_addr = 2;
 * @return {string}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.getFeedAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcFeedTransaction} returns this
 */
proto.bc.exchange.RpcFeedTransaction.prototype.setFeedAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcFeedTransaction} returns this
 */
proto.bc.exchange.RpcFeedTransaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tx_fee = 4;
 * @return {string}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcFeedTransaction} returns this
 */
proto.bc.exchange.RpcFeedTransaction.prototype.setTxFee = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string private_key_hex = 5;
 * @return {string}
 */
proto.bc.exchange.RpcFeedTransaction.prototype.getPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcFeedTransaction} returns this
 */
proto.bc.exchange.RpcFeedTransaction.prototype.setPrivateKeyHex = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.RpcUpdateFeedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.RpcUpdateFeedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcUpdateFeedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    feedAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    senderAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataLength: jspb.Message.getFieldWithDefault(msg, 5, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 6, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 7, ""),
    txPanel: jspb.Message.getFieldWithDefault(msg, 8, ""),
    txPart: jspb.Message.getFieldWithDefault(msg, 9, ""),
    txNonce: jspb.Message.getFieldWithDefault(msg, 10, ""),
    minimumDistance: jspb.Message.getFieldWithDefault(msg, 11, ""),
    privateKeyHex: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.RpcUpdateFeedTransaction;
  return proto.bc.exchange.RpcUpdateFeedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.RpcUpdateFeedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedAddr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderAddr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataLength(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxPanel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxPart(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxNonce(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimumDistance(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKeyHex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.RpcUpdateFeedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.RpcUpdateFeedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcUpdateFeedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeedAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSenderAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataLength();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTxPanel();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTxPart();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTxNonce();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMinimumDistance();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPrivateKeyHex();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string owner_addr = 1;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getOwnerAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setOwnerAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feed_addr = 2;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getFeedAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setFeedAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sender_addr = 3;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getSenderAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setSenderAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string data = 4;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string data_length = 5;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getDataLength = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setDataLength = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string amount = 6;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string tx_fee = 7;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setTxFee = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string tx_panel = 8;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getTxPanel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setTxPanel = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string tx_part = 9;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getTxPart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setTxPart = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tx_nonce = 10;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getTxNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setTxNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string minimum_distance = 11;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getMinimumDistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setMinimumDistance = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string private_key_hex = 12;
 * @return {string}
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.getPrivateKeyHex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcUpdateFeedTransaction} returns this
 */
proto.bc.exchange.RpcUpdateFeedTransaction.prototype.setPrivateKeyHex = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.RpcTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.RpcTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.RpcTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.RpcTransactionResponse}
 */
proto.bc.exchange.RpcTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.RpcTransactionResponse;
  return proto.bc.exchange.RpcTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.RpcTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.RpcTransactionResponse}
 */
proto.bc.exchange.RpcTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bc.exchange.RpcTransactionResponseStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.RpcTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.RpcTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.RpcTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.RpcTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RpcTransactionResponseStatus status = 1;
 * @return {!proto.bc.exchange.RpcTransactionResponseStatus}
 */
proto.bc.exchange.RpcTransactionResponse.prototype.getStatus = function() {
  return /** @type {!proto.bc.exchange.RpcTransactionResponseStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bc.exchange.RpcTransactionResponseStatus} value
 * @return {!proto.bc.exchange.RpcTransactionResponse} returns this
 */
proto.bc.exchange.RpcTransactionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.bc.exchange.RpcTransactionResponse.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransactionResponse} returns this
 */
proto.bc.exchange.RpcTransactionResponse.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.bc.exchange.RpcTransactionResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.RpcTransactionResponse} returns this
 */
proto.bc.exchange.RpcTransactionResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    txHash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    txOutputIndex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    height: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.Transfer}
 */
proto.bc.exchange.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.Transfer;
  return proto.bc.exchange.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.Transfer}
 */
proto.bc.exchange.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxOutputIndex(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.bc.exchange.Transfer.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.bc.exchange.Transfer.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.bc.exchange.Transfer.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tx_hash = 4;
 * @return {string}
 */
proto.bc.exchange.Transfer.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 tx_output_index = 5;
 * @return {number}
 */
proto.bc.exchange.Transfer.prototype.getTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setTxOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timestamp = 6;
 * @return {number}
 */
proto.bc.exchange.Transfer.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 height = 7;
 * @return {number}
 */
proto.bc.exchange.Transfer.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.Transfer} returns this
 */
proto.bc.exchange.Transfer.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.TransferRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.TransferRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.TransferRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TransferRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0),
    from: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.TransferRequest}
 */
proto.bc.exchange.TransferRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.TransferRequest;
  return proto.bc.exchange.TransferRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.TransferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.TransferRequest}
 */
proto.bc.exchange.TransferRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.TransferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.TransferRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.TransferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TransferRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.bc.exchange.TransferRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TransferRequest} returns this
 */
proto.bc.exchange.TransferRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 max = 2;
 * @return {number}
 */
proto.bc.exchange.TransferRequest.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.TransferRequest} returns this
 */
proto.bc.exchange.TransferRequest.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string from = 3;
 * @return {string}
 */
proto.bc.exchange.TransferRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TransferRequest} returns this
 */
proto.bc.exchange.TransferRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetHistoryRequest}
 */
proto.bc.exchange.GetHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetHistoryRequest;
  return proto.bc.exchange.GetHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetHistoryRequest}
 */
proto.bc.exchange.GetHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.bc.exchange.GetHistoryRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetHistoryRequest} returns this
 */
proto.bc.exchange.GetHistoryRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 max = 2;
 * @return {number}
 */
proto.bc.exchange.GetHistoryRequest.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetHistoryRequest} returns this
 */
proto.bc.exchange.GetHistoryRequest.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.TransferResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.TransferResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.TransferResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.TransferResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TransferResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.bc.exchange.Transfer.toObject, includeInstance),
    from: jspb.Message.getFieldWithDefault(msg, 2, ""),
    to: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.TransferResponse}
 */
proto.bc.exchange.TransferResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.TransferResponse;
  return proto.bc.exchange.TransferResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.TransferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.TransferResponse}
 */
proto.bc.exchange.TransferResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.exchange.Transfer;
      reader.readMessage(value,proto.bc.exchange.Transfer.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.TransferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.TransferResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.TransferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TransferResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.exchange.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Transfer transfers = 1;
 * @return {!Array<!proto.bc.exchange.Transfer>}
 */
proto.bc.exchange.TransferResponse.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.bc.exchange.Transfer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.exchange.Transfer, 1));
};


/**
 * @param {!Array<!proto.bc.exchange.Transfer>} value
 * @return {!proto.bc.exchange.TransferResponse} returns this
*/
proto.bc.exchange.TransferResponse.prototype.setTransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.exchange.Transfer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.exchange.Transfer}
 */
proto.bc.exchange.TransferResponse.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.exchange.Transfer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.TransferResponse} returns this
 */
proto.bc.exchange.TransferResponse.prototype.clearTransfersList = function() {
  return this.setTransfersList([]);
};


/**
 * optional string from = 2;
 * @return {string}
 */
proto.bc.exchange.TransferResponse.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TransferResponse} returns this
 */
proto.bc.exchange.TransferResponse.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to = 3;
 * @return {string}
 */
proto.bc.exchange.TransferResponse.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TransferResponse} returns this
 */
proto.bc.exchange.TransferResponse.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetUtxoLengthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetUtxoLengthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxoLengthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetUtxoLengthRequest}
 */
proto.bc.exchange.GetUtxoLengthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetUtxoLengthRequest;
  return proto.bc.exchange.GetUtxoLengthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetUtxoLengthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetUtxoLengthRequest}
 */
proto.bc.exchange.GetUtxoLengthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetUtxoLengthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetUtxoLengthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxoLengthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string script_type = 1;
 * @return {string}
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.getScriptType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxoLengthRequest} returns this
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.setScriptType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxoLengthRequest} returns this
 */
proto.bc.exchange.GetUtxoLengthRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetUtxosRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetUtxosRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetUtxosRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxosRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    from: jspb.Message.getFieldWithDefault(msg, 3, ""),
    to: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetUtxosRequest}
 */
proto.bc.exchange.GetUtxosRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetUtxosRequest;
  return proto.bc.exchange.GetUtxosRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetUtxosRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetUtxosRequest}
 */
proto.bc.exchange.GetUtxosRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUtxosRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetUtxosRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetUtxosRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxosRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string script_type = 1;
 * @return {string}
 */
proto.bc.exchange.GetUtxosRequest.prototype.getScriptType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxosRequest} returns this
 */
proto.bc.exchange.GetUtxosRequest.prototype.setScriptType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.bc.exchange.GetUtxosRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxosRequest} returns this
 */
proto.bc.exchange.GetUtxosRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from = 3;
 * @return {string}
 */
proto.bc.exchange.GetUtxosRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxosRequest} returns this
 */
proto.bc.exchange.GetUtxosRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to = 4;
 * @return {string}
 */
proto.bc.exchange.GetUtxosRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUtxosRequest} returns this
 */
proto.bc.exchange.GetUtxosRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetUtxoLengthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetUtxoLengthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetUtxoLengthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxoLengthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetUtxoLengthResponse}
 */
proto.bc.exchange.GetUtxoLengthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetUtxoLengthResponse;
  return proto.bc.exchange.GetUtxoLengthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetUtxoLengthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetUtxoLengthResponse}
 */
proto.bc.exchange.GetUtxoLengthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUtxoLengthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetUtxoLengthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetUtxoLengthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUtxoLengthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 length = 1;
 * @return {number}
 */
proto.bc.exchange.GetUtxoLengthResponse.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetUtxoLengthResponse} returns this
 */
proto.bc.exchange.GetUtxoLengthResponse.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetSpendableCollateralRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetSpendableCollateralRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetSpendableCollateralRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    from: jspb.Message.getFieldWithDefault(msg, 2, 0),
    to: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetSpendableCollateralRequest}
 */
proto.bc.exchange.GetSpendableCollateralRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetSpendableCollateralRequest;
  return proto.bc.exchange.GetSpendableCollateralRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetSpendableCollateralRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetSpendableCollateralRequest}
 */
proto.bc.exchange.GetSpendableCollateralRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrom(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetSpendableCollateralRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetSpendableCollateralRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetSpendableCollateralRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetSpendableCollateralRequest} returns this
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 from = 2;
 * @return {number}
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetSpendableCollateralRequest} returns this
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 to = 3;
 * @return {number}
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetSpendableCollateralRequest} returns this
 */
proto.bc.exchange.GetSpendableCollateralRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetSpendableCollateralResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetSpendableCollateralResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetSpendableCollateralResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetSpendableCollateralResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetSpendableCollateralResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    outpointsList: jspb.Message.toObjectList(msg.getOutpointsList(),
    core_pb.OutPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetSpendableCollateralResponse}
 */
proto.bc.exchange.GetSpendableCollateralResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetSpendableCollateralResponse;
  return proto.bc.exchange.GetSpendableCollateralResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetSpendableCollateralResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetSpendableCollateralResponse}
 */
proto.bc.exchange.GetSpendableCollateralResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.OutPoint;
      reader.readMessage(value,core_pb.OutPoint.deserializeBinaryFromReader);
      msg.addOutpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetSpendableCollateralResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetSpendableCollateralResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetSpendableCollateralResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetSpendableCollateralResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.OutPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bc.core.OutPoint outpoints = 1;
 * @return {!Array<!proto.bc.core.OutPoint>}
 */
proto.bc.exchange.GetSpendableCollateralResponse.prototype.getOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.OutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.OutPoint, 1));
};


/**
 * @param {!Array<!proto.bc.core.OutPoint>} value
 * @return {!proto.bc.exchange.GetSpendableCollateralResponse} returns this
*/
proto.bc.exchange.GetSpendableCollateralResponse.prototype.setOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.OutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.OutPoint}
 */
proto.bc.exchange.GetSpendableCollateralResponse.prototype.addOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.OutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetSpendableCollateralResponse} returns this
 */
proto.bc.exchange.GetSpendableCollateralResponse.prototype.clearOutpointsList = function() {
  return this.setOutpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBalanceRequest}
 */
proto.bc.exchange.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBalanceRequest;
  return proto.bc.exchange.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBalanceRequest}
 */
proto.bc.exchange.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.bc.exchange.GetBalanceRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBalanceRequest} returns this
 */
proto.bc.exchange.GetBalanceRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetEmbBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetEmbBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetEmbBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetEmbBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetEmbBalanceResponse}
 */
proto.bc.exchange.GetEmbBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetEmbBalanceResponse;
  return proto.bc.exchange.GetEmbBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetEmbBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetEmbBalanceResponse}
 */
proto.bc.exchange.GetEmbBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetEmbBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetEmbBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetEmbBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetEmbBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string balance = 1;
 * @return {string}
 */
proto.bc.exchange.GetEmbBalanceResponse.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetEmbBalanceResponse} returns this
 */
proto.bc.exchange.GetEmbBalanceResponse.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetByteFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetByteFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetByteFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetByteFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fee: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetByteFeeResponse}
 */
proto.bc.exchange.GetByteFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetByteFeeResponse;
  return proto.bc.exchange.GetByteFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetByteFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetByteFeeResponse}
 */
proto.bc.exchange.GetByteFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetByteFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetByteFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetByteFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetByteFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fee = 1;
 * @return {string}
 */
proto.bc.exchange.GetByteFeeResponse.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetByteFeeResponse} returns this
 */
proto.bc.exchange.GetByteFeeResponse.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    confirmed: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unconfirmed: jspb.Message.getFieldWithDefault(msg, 3, ""),
    collateralized: jspb.Message.getFieldWithDefault(msg, 4, ""),
    unlockable: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBalanceResponse}
 */
proto.bc.exchange.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBalanceResponse;
  return proto.bc.exchange.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBalanceResponse}
 */
proto.bc.exchange.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfirmed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnconfirmed(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralized(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnlockable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfirmed();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnconfirmed();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCollateralized();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUnlockable();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.bc.exchange.GetBalanceResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetBalanceResponse} returns this
 */
proto.bc.exchange.GetBalanceResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string confirmed = 2;
 * @return {string}
 */
proto.bc.exchange.GetBalanceResponse.prototype.getConfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBalanceResponse} returns this
 */
proto.bc.exchange.GetBalanceResponse.prototype.setConfirmed = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unconfirmed = 3;
 * @return {string}
 */
proto.bc.exchange.GetBalanceResponse.prototype.getUnconfirmed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBalanceResponse} returns this
 */
proto.bc.exchange.GetBalanceResponse.prototype.setUnconfirmed = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string collateralized = 4;
 * @return {string}
 */
proto.bc.exchange.GetBalanceResponse.prototype.getCollateralized = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBalanceResponse} returns this
 */
proto.bc.exchange.GetBalanceResponse.prototype.setCollateralized = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string unlockable = 5;
 * @return {string}
 */
proto.bc.exchange.GetBalanceResponse.prototype.getUnlockable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBalanceResponse} returns this
 */
proto.bc.exchange.GetBalanceResponse.prototype.setUnlockable = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetUnlockTakerTxParamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txOutputIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsRequest}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetUnlockTakerTxParamsRequest;
  return proto.bc.exchange.GetUnlockTakerTxParamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsRequest}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxOutputIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetUnlockTakerTxParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsRequest} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 tx_output_index = 2;
 * @return {number}
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.getTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsRequest} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsRequest.prototype.setTxOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetUnlockTakerTxParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unlockScriptsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    valueInTx: msg.getValueInTx_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetUnlockTakerTxParamsResponse;
  return proto.bc.exchange.GetUnlockTakerTxParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUnlockScripts(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValueInTx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetUnlockTakerTxParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnlockScriptsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getValueInTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated string unlock_scripts = 1;
 * @return {!Array<string>}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.getUnlockScriptsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.setUnlockScriptsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.addUnlockScripts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.clearUnlockScriptsList = function() {
  return this.setUnlockScriptsList([]);
};


/**
 * optional bytes value_in_tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.getValueInTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value_in_tx = 2;
 * This is a type-conversion wrapper around `getValueInTx()`
 * @return {string}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.getValueInTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValueInTx()));
};


/**
 * optional bytes value_in_tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValueInTx()`
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.getValueInTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValueInTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.exchange.GetUnlockTakerTxParamsResponse} returns this
 */
proto.bc.exchange.GetUnlockTakerTxParamsResponse.prototype.setValueInTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.MakerOrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.MakerOrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.MakerOrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.MakerOrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deposit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    settlement: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shiftMaker: jspb.Message.getFieldWithDefault(msg, 4, 0),
    shiftTaker: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sendsFromChain: jspb.Message.getFieldWithDefault(msg, 6, ""),
    receivesToChain: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sendsFromAddress: jspb.Message.getFieldWithDefault(msg, 8, ""),
    receivesToAddress: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sendsUnit: jspb.Message.getFieldWithDefault(msg, 10, ""),
    receivesUnit: jspb.Message.getFieldWithDefault(msg, 11, ""),
    doubleHashedBcAddress: jspb.Message.getFieldWithDefault(msg, 12, ""),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 13, ""),
    originalNrg: jspb.Message.getFieldWithDefault(msg, 14, ""),
    nrgUnit: jspb.Message.getFieldWithDefault(msg, 15, ""),
    txHash: jspb.Message.getFieldWithDefault(msg, 16, ""),
    txOutputIndex: jspb.Message.getFieldWithDefault(msg, 17, 0),
    isSettled: jspb.Message.getBooleanFieldWithDefault(msg, 18, false),
    fixedUnitFee: jspb.Message.getFieldWithDefault(msg, 19, ""),
    base: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.MakerOrderInfo}
 */
proto.bc.exchange.MakerOrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.MakerOrderInfo;
  return proto.bc.exchange.MakerOrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.MakerOrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.MakerOrderInfo}
 */
proto.bc.exchange.MakerOrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeposit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSettlement(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShiftMaker(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setShiftTaker(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsFromChain(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivesToChain(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsFromAddress(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivesToAddress(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsUnit(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivesUnit(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleHashedBcAddress(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginalNrg(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setNrgUnit(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxOutputIndex(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSettled(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setFixedUnitFee(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.MakerOrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.MakerOrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.MakerOrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.MakerOrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDeposit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSettlement();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getShiftMaker();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getShiftTaker();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSendsFromChain();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReceivesToChain();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSendsFromAddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getReceivesToAddress();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSendsUnit();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getReceivesUnit();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDoubleHashedBcAddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOriginalNrg();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getNrgUnit();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getIsSettled();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getFixedUnitFee();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getBase();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
};


/**
 * optional uint64 trade_height = 1;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getTradeHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setTradeHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 deposit = 2;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getDeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setDeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 settlement = 3;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getSettlement = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setSettlement = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 shift_maker = 4;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getShiftMaker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setShiftMaker = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 shift_taker = 5;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getShiftTaker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setShiftTaker = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string sends_from_chain = 6;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getSendsFromChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setSendsFromChain = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string receives_to_chain = 7;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getReceivesToChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setReceivesToChain = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sends_from_address = 8;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getSendsFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setSendsFromAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string receives_to_address = 9;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getReceivesToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setReceivesToAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string sends_unit = 10;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getSendsUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setSendsUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string receives_unit = 11;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getReceivesUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setReceivesUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string double_hashed_bc_address = 12;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getDoubleHashedBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setDoubleHashedBcAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string collateralized_nrg = 13;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setCollateralizedNrg = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string original_nrg = 14;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getOriginalNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setOriginalNrg = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string nrg_unit = 15;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getNrgUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setNrgUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string tx_hash = 16;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional uint32 tx_output_index = 17;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setTxOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool is_settled = 18;
 * @return {boolean}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getIsSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 18, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setIsSettled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional string fixed_unit_fee = 19;
 * @return {string}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getFixedUnitFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setFixedUnitFee = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint32 base = 20;
 * @return {number}
 */
proto.bc.exchange.MakerOrderInfo.prototype.getBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.MakerOrderInfo} returns this
 */
proto.bc.exchange.MakerOrderInfo.prototype.setBase = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.TakerOrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.TakerOrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.TakerOrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TakerOrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendsFromAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    receivesToAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    doubleHashedBcAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isSettled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    txHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    txOutputIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalCollateral: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tradeHeight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.TakerOrderInfo}
 */
proto.bc.exchange.TakerOrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.TakerOrderInfo;
  return proto.bc.exchange.TakerOrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.TakerOrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.TakerOrderInfo}
 */
proto.bc.exchange.TakerOrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsFromAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivesToAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoubleHashedBcAddress(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSettled(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxOutputIndex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalCollateral(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTradeHeight(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.TakerOrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.TakerOrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.TakerOrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TakerOrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendsFromAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceivesToAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDoubleHashedBcAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsSettled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTotalCollateral();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTradeHeight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string sends_from_address = 1;
 * @return {string}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getSendsFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setSendsFromAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string receives_to_address = 2;
 * @return {string}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getReceivesToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setReceivesToAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string double_hashed_bc_address = 3;
 * @return {string}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getDoubleHashedBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setDoubleHashedBcAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_settled = 4;
 * @return {boolean}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getIsSettled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setIsSettled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string tx_hash = 5;
 * @return {string}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 tx_output_index = 6;
 * @return {number}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setTxOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string total_collateral = 7;
 * @return {string}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getTotalCollateral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setTotalCollateral = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 trade_height = 8;
 * @return {number}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getTradeHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setTradeHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 timestamp = 9;
 * @return {number}
 */
proto.bc.exchange.TakerOrderInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.TakerOrderInfo} returns this
 */
proto.bc.exchange.TakerOrderInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.MatchedOrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.MatchedOrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.MatchedOrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    maker: (f = msg.getMaker()) && proto.bc.exchange.MakerOrderInfo.toObject(includeInstance, f),
    taker: (f = msg.getTaker()) && proto.bc.exchange.TakerOrderInfo.toObject(includeInstance, f),
    unlocked: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.MatchedOrderInfo}
 */
proto.bc.exchange.MatchedOrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.MatchedOrderInfo;
  return proto.bc.exchange.MatchedOrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.MatchedOrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.MatchedOrderInfo}
 */
proto.bc.exchange.MatchedOrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.exchange.MakerOrderInfo;
      reader.readMessage(value,proto.bc.exchange.MakerOrderInfo.deserializeBinaryFromReader);
      msg.setMaker(value);
      break;
    case 2:
      var value = new proto.bc.exchange.TakerOrderInfo;
      reader.readMessage(value,proto.bc.exchange.TakerOrderInfo.deserializeBinaryFromReader);
      msg.setTaker(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnlocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.MatchedOrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.MatchedOrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.MatchedOrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaker();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.exchange.MakerOrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getTaker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.bc.exchange.TakerOrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getUnlocked();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional MakerOrderInfo maker = 1;
 * @return {?proto.bc.exchange.MakerOrderInfo}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.getMaker = function() {
  return /** @type{?proto.bc.exchange.MakerOrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.bc.exchange.MakerOrderInfo, 1));
};


/**
 * @param {?proto.bc.exchange.MakerOrderInfo|undefined} value
 * @return {!proto.bc.exchange.MatchedOrderInfo} returns this
*/
proto.bc.exchange.MatchedOrderInfo.prototype.setMaker = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.exchange.MatchedOrderInfo} returns this
 */
proto.bc.exchange.MatchedOrderInfo.prototype.clearMaker = function() {
  return this.setMaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.hasMaker = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TakerOrderInfo taker = 2;
 * @return {?proto.bc.exchange.TakerOrderInfo}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.getTaker = function() {
  return /** @type{?proto.bc.exchange.TakerOrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.bc.exchange.TakerOrderInfo, 2));
};


/**
 * @param {?proto.bc.exchange.TakerOrderInfo|undefined} value
 * @return {!proto.bc.exchange.MatchedOrderInfo} returns this
*/
proto.bc.exchange.MatchedOrderInfo.prototype.setTaker = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.exchange.MatchedOrderInfo} returns this
 */
proto.bc.exchange.MatchedOrderInfo.prototype.clearTaker = function() {
  return this.setTaker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.hasTaker = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool unlocked = 7;
 * @return {boolean}
 */
proto.bc.exchange.MatchedOrderInfo.prototype.getUnlocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.exchange.MatchedOrderInfo} returns this
 */
proto.bc.exchange.MatchedOrderInfo.prototype.setUnlocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetOpenOrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetOpenOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetOpenOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetOpenOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOpenOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.bc.exchange.MakerOrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetOpenOrdersResponse}
 */
proto.bc.exchange.GetOpenOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetOpenOrdersResponse;
  return proto.bc.exchange.GetOpenOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetOpenOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetOpenOrdersResponse}
 */
proto.bc.exchange.GetOpenOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.exchange.MakerOrderInfo;
      reader.readMessage(value,proto.bc.exchange.MakerOrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetOpenOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetOpenOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetOpenOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOpenOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.exchange.MakerOrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MakerOrderInfo orders = 1;
 * @return {!Array<!proto.bc.exchange.MakerOrderInfo>}
 */
proto.bc.exchange.GetOpenOrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.bc.exchange.MakerOrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.exchange.MakerOrderInfo, 1));
};


/**
 * @param {!Array<!proto.bc.exchange.MakerOrderInfo>} value
 * @return {!proto.bc.exchange.GetOpenOrdersResponse} returns this
*/
proto.bc.exchange.GetOpenOrdersResponse.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.exchange.MakerOrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.exchange.MakerOrderInfo}
 */
proto.bc.exchange.GetOpenOrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.exchange.MakerOrderInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetOpenOrdersResponse} returns this
 */
proto.bc.exchange.GetOpenOrdersResponse.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetMatchedOrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetMatchedOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetMatchedOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetMatchedOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMatchedOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.bc.exchange.MatchedOrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetMatchedOrdersResponse}
 */
proto.bc.exchange.GetMatchedOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetMatchedOrdersResponse;
  return proto.bc.exchange.GetMatchedOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetMatchedOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetMatchedOrdersResponse}
 */
proto.bc.exchange.GetMatchedOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.exchange.MatchedOrderInfo;
      reader.readMessage(value,proto.bc.exchange.MatchedOrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetMatchedOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetMatchedOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetMatchedOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMatchedOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.exchange.MatchedOrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MatchedOrderInfo orders = 1;
 * @return {!Array<!proto.bc.exchange.MatchedOrderInfo>}
 */
proto.bc.exchange.GetMatchedOrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.bc.exchange.MatchedOrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.exchange.MatchedOrderInfo, 1));
};


/**
 * @param {!Array<!proto.bc.exchange.MatchedOrderInfo>} value
 * @return {!proto.bc.exchange.GetMatchedOrdersResponse} returns this
*/
proto.bc.exchange.GetMatchedOrdersResponse.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.exchange.MatchedOrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.exchange.MatchedOrderInfo}
 */
proto.bc.exchange.GetMatchedOrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.exchange.MatchedOrderInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetMatchedOrdersResponse} returns this
 */
proto.bc.exchange.GetMatchedOrdersResponse.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetHistoricalOrdersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetHistoricalOrdersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetHistoricalOrdersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetHistoricalOrdersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.bc.exchange.MatchedOrderInfo.toObject, includeInstance),
    nextBlock: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetHistoricalOrdersResponse}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetHistoricalOrdersResponse;
  return proto.bc.exchange.GetHistoricalOrdersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetHistoricalOrdersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetHistoricalOrdersResponse}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.exchange.MatchedOrderInfo;
      reader.readMessage(value,proto.bc.exchange.MatchedOrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNextBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetHistoricalOrdersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetHistoricalOrdersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetHistoricalOrdersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.exchange.MatchedOrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getNextBlock();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated MatchedOrderInfo orders = 1;
 * @return {!Array<!proto.bc.exchange.MatchedOrderInfo>}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array<!proto.bc.exchange.MatchedOrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.exchange.MatchedOrderInfo, 1));
};


/**
 * @param {!Array<!proto.bc.exchange.MatchedOrderInfo>} value
 * @return {!proto.bc.exchange.GetHistoricalOrdersResponse} returns this
*/
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.setOrdersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.exchange.MatchedOrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.exchange.MatchedOrderInfo}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.exchange.MatchedOrderInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetHistoricalOrdersResponse} returns this
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.clearOrdersList = function() {
  return this.setOrdersList([]);
};


/**
 * optional uint64 next_block = 2;
 * @return {number}
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.getNextBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetHistoricalOrdersResponse} returns this
 */
proto.bc.exchange.GetHistoricalOrdersResponse.prototype.setNextBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.TakerOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.TakerOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.TakerOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TakerOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendsFromAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    receivesToAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    makerTxHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    makerTxOutputIndex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    collateralizedNrg: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.TakerOrder}
 */
proto.bc.exchange.TakerOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.TakerOrder;
  return proto.bc.exchange.TakerOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.TakerOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.TakerOrder}
 */
proto.bc.exchange.TakerOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendsFromAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivesToAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerTxHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerTxOutputIndex(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateralizedNrg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.TakerOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.TakerOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.TakerOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.TakerOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSendsFromAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceivesToAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMakerTxHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMakerTxOutputIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCollateralizedNrg();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string sends_from_address = 1;
 * @return {string}
 */
proto.bc.exchange.TakerOrder.prototype.getSendsFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrder} returns this
 */
proto.bc.exchange.TakerOrder.prototype.setSendsFromAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string receives_to_address = 2;
 * @return {string}
 */
proto.bc.exchange.TakerOrder.prototype.getReceivesToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrder} returns this
 */
proto.bc.exchange.TakerOrder.prototype.setReceivesToAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string maker_tx_hash = 3;
 * @return {string}
 */
proto.bc.exchange.TakerOrder.prototype.getMakerTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrder} returns this
 */
proto.bc.exchange.TakerOrder.prototype.setMakerTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 maker_tx_output_index = 4;
 * @return {number}
 */
proto.bc.exchange.TakerOrder.prototype.getMakerTxOutputIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.TakerOrder} returns this
 */
proto.bc.exchange.TakerOrder.prototype.setMakerTxOutputIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string collateralized_nrg = 5;
 * @return {string}
 */
proto.bc.exchange.TakerOrder.prototype.getCollateralizedNrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.TakerOrder} returns this
 */
proto.bc.exchange.TakerOrder.prototype.setCollateralizedNrg = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlake2blRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlake2blRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlake2blRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlake2blRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toBeHashed: jspb.Message.getFieldWithDefault(msg, 1, ""),
    times: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlake2blRequest}
 */
proto.bc.exchange.GetBlake2blRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlake2blRequest;
  return proto.bc.exchange.GetBlake2blRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlake2blRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlake2blRequest}
 */
proto.bc.exchange.GetBlake2blRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToBeHashed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlake2blRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlake2blRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlake2blRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlake2blRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToBeHashed();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimes();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string to_be_hashed = 1;
 * @return {string}
 */
proto.bc.exchange.GetBlake2blRequest.prototype.getToBeHashed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBlake2blRequest} returns this
 */
proto.bc.exchange.GetBlake2blRequest.prototype.setToBeHashed = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 times = 2;
 * @return {number}
 */
proto.bc.exchange.GetBlake2blRequest.prototype.getTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetBlake2blRequest} returns this
 */
proto.bc.exchange.GetBlake2blRequest.prototype.setTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlake2blResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlake2blResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlake2blResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlake2blResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlake2blResponse}
 */
proto.bc.exchange.GetBlake2blResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlake2blResponse;
  return proto.bc.exchange.GetBlake2blResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlake2blResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlake2blResponse}
 */
proto.bc.exchange.GetBlake2blResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlake2blResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlake2blResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlake2blResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlake2blResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.exchange.GetBlake2blResponse.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBlake2blResponse} returns this
 */
proto.bc.exchange.GetBlake2blResponse.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.VanityConvertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.VanityConvertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.VanityConvertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.VanityConvertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vanity: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.VanityConvertRequest}
 */
proto.bc.exchange.VanityConvertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.VanityConvertRequest;
  return proto.bc.exchange.VanityConvertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.VanityConvertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.VanityConvertRequest}
 */
proto.bc.exchange.VanityConvertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.VanityConvertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.VanityConvertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.VanityConvertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.VanityConvertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVanity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vanity = 1;
 * @return {string}
 */
proto.bc.exchange.VanityConvertRequest.prototype.getVanity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.VanityConvertRequest} returns this
 */
proto.bc.exchange.VanityConvertRequest.prototype.setVanity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.VanityConvertResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.VanityConvertResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.VanityConvertResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.VanityConvertResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bcAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.VanityConvertResponse}
 */
proto.bc.exchange.VanityConvertResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.VanityConvertResponse;
  return proto.bc.exchange.VanityConvertResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.VanityConvertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.VanityConvertResponse}
 */
proto.bc.exchange.VanityConvertResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBcAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.VanityConvertResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.VanityConvertResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.VanityConvertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.VanityConvertResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBcAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string bc_address = 1;
 * @return {string}
 */
proto.bc.exchange.VanityConvertResponse.prototype.getBcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.VanityConvertResponse} returns this
 */
proto.bc.exchange.VanityConvertResponse.prototype.setBcAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.bc.exchange.VanityConvertResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.VanityConvertResponse} returns this
 */
proto.bc.exchange.VanityConvertResponse.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetRoveredBlockHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetRoveredBlockHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlockHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetRoveredBlockHashRequest}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetRoveredBlockHashRequest;
  return proto.bc.exchange.GetRoveredBlockHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetRoveredBlockHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetRoveredBlockHashRequest}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetRoveredBlockHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetRoveredBlockHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlockHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetRoveredBlockHashRequest} returns this
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetRoveredBlockHashRequest} returns this
 */
proto.bc.exchange.GetRoveredBlockHashRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetRoveredBlockHeightRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetRoveredBlockHeightRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetRoveredBlockHeightRequest}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetRoveredBlockHeightRequest;
  return proto.bc.exchange.GetRoveredBlockHeightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetRoveredBlockHeightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetRoveredBlockHeightRequest}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetRoveredBlockHeightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetRoveredBlockHeightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetRoveredBlockHeightRequest} returns this
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 height = 2;
 * @return {number}
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetRoveredBlockHeightRequest} returns this
 */
proto.bc.exchange.GetRoveredBlockHeightRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlockHashRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlockHashRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlockHashRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlockHashRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlockHashRequest}
 */
proto.bc.exchange.GetBlockHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlockHashRequest;
  return proto.bc.exchange.GetBlockHashRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlockHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlockHashRequest}
 */
proto.bc.exchange.GetBlockHashRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlockHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlockHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlockHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlockHashRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.exchange.GetBlockHashRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetBlockHashRequest} returns this
 */
proto.bc.exchange.GetBlockHashRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlockHeightRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlockHeightRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlockHeightRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlockHeightRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlockHeightRequest}
 */
proto.bc.exchange.GetBlockHeightRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlockHeightRequest;
  return proto.bc.exchange.GetBlockHeightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlockHeightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlockHeightRequest}
 */
proto.bc.exchange.GetBlockHeightRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlockHeightRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlockHeightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlockHeightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlockHeightRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.bc.exchange.GetBlockHeightRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetBlockHeightRequest} returns this
 */
proto.bc.exchange.GetBlockHeightRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlocksRequest}
 */
proto.bc.exchange.GetBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlocksRequest;
  return proto.bc.exchange.GetBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlocksRequest}
 */
proto.bc.exchange.GetBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEndHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 start_height = 1;
 * @return {number}
 */
proto.bc.exchange.GetBlocksRequest.prototype.getStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetBlocksRequest} returns this
 */
proto.bc.exchange.GetBlocksRequest.prototype.setStartHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 end_height = 2;
 * @return {number}
 */
proto.bc.exchange.GetBlocksRequest.prototype.getEndHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetBlocksRequest} returns this
 */
proto.bc.exchange.GetBlocksRequest.prototype.setEndHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetBlocksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    core_pb.BcBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetBlocksResponse}
 */
proto.bc.exchange.GetBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetBlocksResponse;
  return proto.bc.exchange.GetBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetBlocksResponse}
 */
proto.bc.exchange.GetBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.BcBlock;
      reader.readMessage(value,core_pb.BcBlock.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.BcBlock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bc.core.BcBlock blocks = 1;
 * @return {!Array<!proto.bc.core.BcBlock>}
 */
proto.bc.exchange.GetBlocksResponse.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.bc.core.BcBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.BcBlock, 1));
};


/**
 * @param {!Array<!proto.bc.core.BcBlock>} value
 * @return {!proto.bc.exchange.GetBlocksResponse} returns this
*/
proto.bc.exchange.GetBlocksResponse.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.BcBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BcBlock}
 */
proto.bc.exchange.GetBlocksResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.BcBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetBlocksResponse} returns this
 */
proto.bc.exchange.GetBlocksResponse.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetRoveredBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetRoveredBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endHeight: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetRoveredBlocksRequest}
 */
proto.bc.exchange.GetRoveredBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetRoveredBlocksRequest;
  return proto.bc.exchange.GetRoveredBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetRoveredBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetRoveredBlocksRequest}
 */
proto.bc.exchange.GetRoveredBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetRoveredBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetRoveredBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetRoveredBlocksRequest} returns this
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 start_height = 2;
 * @return {number}
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.getStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetRoveredBlocksRequest} returns this
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.setStartHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 end_height = 3;
 * @return {number}
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.getEndHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetRoveredBlocksRequest} returns this
 */
proto.bc.exchange.GetRoveredBlocksRequest.prototype.setEndHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetRawMempoolResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetRawMempoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetRawMempoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetRawMempoolResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRawMempoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    core_pb.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetRawMempoolResponse}
 */
proto.bc.exchange.GetRawMempoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetRawMempoolResponse;
  return proto.bc.exchange.GetRawMempoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetRawMempoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetRawMempoolResponse}
 */
proto.bc.exchange.GetRawMempoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.Transaction;
      reader.readMessage(value,core_pb.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetRawMempoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetRawMempoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetRawMempoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRawMempoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bc.core.Transaction transactions = 1;
 * @return {!Array<!proto.bc.core.Transaction>}
 */
proto.bc.exchange.GetRawMempoolResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.bc.core.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.Transaction, 1));
};


/**
 * @param {!Array<!proto.bc.core.Transaction>} value
 * @return {!proto.bc.exchange.GetRawMempoolResponse} returns this
*/
proto.bc.exchange.GetRawMempoolResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.Transaction}
 */
proto.bc.exchange.GetRawMempoolResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetRawMempoolResponse} returns this
 */
proto.bc.exchange.GetRawMempoolResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetRoveredBlocksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetRoveredBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetRoveredBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetRoveredBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    core_pb.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetRoveredBlocksResponse}
 */
proto.bc.exchange.GetRoveredBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetRoveredBlocksResponse;
  return proto.bc.exchange.GetRoveredBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetRoveredBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetRoveredBlocksResponse}
 */
proto.bc.exchange.GetRoveredBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.Block;
      reader.readMessage(value,core_pb.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetRoveredBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetRoveredBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetRoveredBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetRoveredBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bc.core.Block blocks = 1;
 * @return {!Array<!proto.bc.core.Block>}
 */
proto.bc.exchange.GetRoveredBlocksResponse.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.bc.core.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.Block, 1));
};


/**
 * @param {!Array<!proto.bc.core.Block>} value
 * @return {!proto.bc.exchange.GetRoveredBlocksResponse} returns this
*/
proto.bc.exchange.GetRoveredBlocksResponse.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.Block}
 */
proto.bc.exchange.GetRoveredBlocksResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetRoveredBlocksResponse} returns this
 */
proto.bc.exchange.GetRoveredBlocksResponse.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetTxRequest}
 */
proto.bc.exchange.GetTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetTxRequest;
  return proto.bc.exchange.GetTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetTxRequest}
 */
proto.bc.exchange.GetTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.exchange.GetTxRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetTxRequest} returns this
 */
proto.bc.exchange.GetTxRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetMarkedTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetMarkedTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMarkedTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetMarkedTxRequest}
 */
proto.bc.exchange.GetMarkedTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetMarkedTxRequest;
  return proto.bc.exchange.GetMarkedTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetMarkedTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetMarkedTxRequest}
 */
proto.bc.exchange.GetMarkedTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetMarkedTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetMarkedTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMarkedTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetMarkedTxRequest} returns this
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetMarkedTxRequest} returns this
 */
proto.bc.exchange.GetMarkedTxRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetOutPointRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetOutPointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetOutPointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOutPointRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetOutPointRequest}
 */
proto.bc.exchange.GetOutPointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetOutPointRequest;
  return proto.bc.exchange.GetOutPointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetOutPointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetOutPointRequest}
 */
proto.bc.exchange.GetOutPointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetOutPointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetOutPointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetOutPointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOutPointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.exchange.GetOutPointRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetOutPointRequest} returns this
 */
proto.bc.exchange.GetOutPointRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.bc.exchange.GetOutPointRequest.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetOutPointRequest} returns this
 */
proto.bc.exchange.GetOutPointRequest.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetTradeStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetTradeStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetTradeStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetTradeStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetTradeStatusResponse}
 */
proto.bc.exchange.GetTradeStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetTradeStatusResponse;
  return proto.bc.exchange.GetTradeStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetTradeStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetTradeStatusResponse}
 */
proto.bc.exchange.GetTradeStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetTradeStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetTradeStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetTradeStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetTradeStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 status = 1;
 * @return {number}
 */
proto.bc.exchange.GetTradeStatusResponse.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.exchange.GetTradeStatusResponse} returns this
 */
proto.bc.exchange.GetTradeStatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetOutPointStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetOutPointStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetOutPointStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOutPointStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    unspent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetOutPointStatusResponse}
 */
proto.bc.exchange.GetOutPointStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetOutPointStatusResponse;
  return proto.bc.exchange.GetOutPointStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetOutPointStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetOutPointStatusResponse}
 */
proto.bc.exchange.GetOutPointStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnspent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetOutPointStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetOutPointStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetOutPointStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetOutPointStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnspent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool unspent = 1;
 * @return {boolean}
 */
proto.bc.exchange.GetOutPointStatusResponse.prototype.getUnspent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.exchange.GetOutPointStatusResponse} returns this
 */
proto.bc.exchange.GetOutPointStatusResponse.prototype.setUnspent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.CurrentWork.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.CurrentWork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.CurrentWork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.CurrentWork.toObject = function(includeInstance, msg) {
  var f, obj = {
    work: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.CurrentWork}
 */
proto.bc.exchange.CurrentWork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.CurrentWork;
  return proto.bc.exchange.CurrentWork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.CurrentWork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.CurrentWork}
 */
proto.bc.exchange.CurrentWork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.CurrentWork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.CurrentWork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.CurrentWork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.CurrentWork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string work = 1;
 * @return {string}
 */
proto.bc.exchange.CurrentWork.prototype.getWork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.CurrentWork} returns this
 */
proto.bc.exchange.CurrentWork.prototype.setWork = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.SyncStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.SyncStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.SyncStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.SyncStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.SyncStatus}
 */
proto.bc.exchange.SyncStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.SyncStatus;
  return proto.bc.exchange.SyncStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.SyncStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.SyncStatus}
 */
proto.bc.exchange.SyncStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.SyncStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.SyncStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.SyncStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.SyncStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.bc.exchange.SyncStatus.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.SyncStatus} returns this
 */
proto.bc.exchange.SyncStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.SettingsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.SettingsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.SettingsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.SettingsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ngrokTunnel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    buildVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.SettingsResponse}
 */
proto.bc.exchange.SettingsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.SettingsResponse;
  return proto.bc.exchange.SettingsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.SettingsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.SettingsResponse}
 */
proto.bc.exchange.SettingsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNgrokTunnel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.SettingsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.SettingsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.SettingsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.SettingsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNgrokTunnel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBuildVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ngrok_tunnel = 1;
 * @return {string}
 */
proto.bc.exchange.SettingsResponse.prototype.getNgrokTunnel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.SettingsResponse} returns this
 */
proto.bc.exchange.SettingsResponse.prototype.setNgrokTunnel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string build_version = 2;
 * @return {string}
 */
proto.bc.exchange.SettingsResponse.prototype.getBuildVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.SettingsResponse} returns this
 */
proto.bc.exchange.SettingsResponse.prototype.setBuildVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetNrgSupplyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetNrgSupplyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetNrgSupplyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetNrgSupplyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetNrgSupplyResponse}
 */
proto.bc.exchange.GetNrgSupplyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetNrgSupplyResponse;
  return proto.bc.exchange.GetNrgSupplyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetNrgSupplyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetNrgSupplyResponse}
 */
proto.bc.exchange.GetNrgSupplyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetNrgSupplyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetNrgSupplyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetNrgSupplyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetNrgSupplyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string amount = 1;
 * @return {string}
 */
proto.bc.exchange.GetNrgSupplyResponse.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.exchange.GetNrgSupplyResponse} returns this
 */
proto.bc.exchange.GetNrgSupplyResponse.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.exchange.GetMarkedTxs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.exchange.GetMarkedTxs.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.exchange.GetMarkedTxs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.exchange.GetMarkedTxs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMarkedTxs.toObject = function(includeInstance, msg) {
  var f, obj = {
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    core_pb.MarkedTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.exchange.GetMarkedTxs}
 */
proto.bc.exchange.GetMarkedTxs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.exchange.GetMarkedTxs;
  return proto.bc.exchange.GetMarkedTxs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.exchange.GetMarkedTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.exchange.GetMarkedTxs}
 */
proto.bc.exchange.GetMarkedTxs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_pb.MarkedTransaction;
      reader.readMessage(value,core_pb.MarkedTransaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.exchange.GetMarkedTxs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.exchange.GetMarkedTxs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.exchange.GetMarkedTxs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.exchange.GetMarkedTxs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_pb.MarkedTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated bc.core.MarkedTransaction txs = 1;
 * @return {!Array<!proto.bc.core.MarkedTransaction>}
 */
proto.bc.exchange.GetMarkedTxs.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.bc.core.MarkedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_pb.MarkedTransaction, 1));
};


/**
 * @param {!Array<!proto.bc.core.MarkedTransaction>} value
 * @return {!proto.bc.exchange.GetMarkedTxs} returns this
*/
proto.bc.exchange.GetMarkedTxs.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.MarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.MarkedTransaction}
 */
proto.bc.exchange.GetMarkedTxs.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.MarkedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.exchange.GetMarkedTxs} returns this
 */
proto.bc.exchange.GetMarkedTxs.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * @enum {number}
 */
proto.bc.exchange.RpcTransactionResponseStatus = {
  SUCCESS: 0,
  FAILURE: 1
};

goog.object.extend(exports, proto.bc.exchange);
