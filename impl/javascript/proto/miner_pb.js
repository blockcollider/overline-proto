// source: miner.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
goog.exportSymbol('proto.bc.miner.BlockFingerprint', null, global);
goog.exportSymbol('proto.bc.miner.MinerRequest', null, global);
goog.exportSymbol('proto.bc.miner.MinerResponse', null, global);
goog.exportSymbol('proto.bc.miner.MinerResponseResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.miner.BlockFingerprint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.miner.BlockFingerprint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.miner.BlockFingerprint.displayName = 'proto.bc.miner.BlockFingerprint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.miner.MinerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.miner.MinerRequest, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.miner.MinerRequest.displayName = 'proto.bc.miner.MinerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.miner.MinerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.miner.MinerResponse, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.miner.MinerResponse.displayName = 'proto.bc.miner.MinerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.miner.BlockFingerprint.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.miner.BlockFingerprint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.miner.BlockFingerprint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.BlockFingerprint.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isCurrent: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.miner.BlockFingerprint}
 */
proto.bc.miner.BlockFingerprint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.miner.BlockFingerprint;
  return proto.bc.miner.BlockFingerprint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.miner.BlockFingerprint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.miner.BlockFingerprint}
 */
proto.bc.miner.BlockFingerprint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCurrent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.miner.BlockFingerprint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.miner.BlockFingerprint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.miner.BlockFingerprint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.BlockFingerprint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIsCurrent();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.miner.BlockFingerprint.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.BlockFingerprint} returns this
 */
proto.bc.miner.BlockFingerprint.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.miner.BlockFingerprint.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.BlockFingerprint} returns this
 */
proto.bc.miner.BlockFingerprint.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.bc.miner.BlockFingerprint.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.BlockFingerprint} returns this
 */
proto.bc.miner.BlockFingerprint.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_current = 4;
 * @return {boolean}
 */
proto.bc.miner.BlockFingerprint.prototype.getIsCurrent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.miner.BlockFingerprint} returns this
 */
proto.bc.miner.BlockFingerprint.prototype.setIsCurrent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.miner.MinerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.miner.MinerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.miner.MinerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.MinerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    workId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currentTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    work: jspb.Message.getFieldWithDefault(msg, 4, ""),
    minerKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastPreviousBlock: (f = msg.getLastPreviousBlock()) && core_pb.BcBlock.toObject(includeInstance, f),
    newBlockHeaders: (f = msg.getNewBlockHeaders()) && core_pb.BlockchainHeaders.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.miner.MinerRequest}
 */
proto.bc.miner.MinerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.miner.MinerRequest;
  return proto.bc.miner.MinerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.miner.MinerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.miner.MinerRequest}
 */
proto.bc.miner.MinerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWork(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinerKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleRoot(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 8:
      var value = new core_pb.BcBlock;
      reader.readMessage(value,core_pb.BcBlock.deserializeBinaryFromReader);
      msg.setLastPreviousBlock(value);
      break;
    case 9:
      var value = new core_pb.BlockchainHeaders;
      reader.readMessage(value,core_pb.BlockchainHeaders.deserializeBinaryFromReader);
      msg.setNewBlockHeaders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.miner.MinerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.miner.MinerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.miner.MinerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.MinerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrentTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWork();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMinerKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastPreviousBlock();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      core_pb.BcBlock.serializeBinaryToWriter
    );
  }
  f = message.getNewBlockHeaders();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      core_pb.BlockchainHeaders.serializeBinaryToWriter
    );
  }
};


/**
 * optional string work_id = 1;
 * @return {string}
 */
proto.bc.miner.MinerRequest.prototype.getWorkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setWorkId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 current_timestamp = 2;
 * @return {number}
 */
proto.bc.miner.MinerRequest.prototype.getCurrentTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setCurrentTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.bc.miner.MinerRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string work = 4;
 * @return {string}
 */
proto.bc.miner.MinerRequest.prototype.getWork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setWork = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string miner_key = 5;
 * @return {string}
 */
proto.bc.miner.MinerRequest.prototype.getMinerKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setMinerKey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.miner.MinerRequest.prototype.getMerkleRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string difficulty = 7;
 * @return {string}
 */
proto.bc.miner.MinerRequest.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bc.core.BcBlock last_previous_block = 8;
 * @return {?proto.bc.core.BcBlock}
 */
proto.bc.miner.MinerRequest.prototype.getLastPreviousBlock = function() {
  return /** @type{?proto.bc.core.BcBlock} */ (
    jspb.Message.getWrapperField(this, core_pb.BcBlock, 8));
};


/**
 * @param {?proto.bc.core.BcBlock|undefined} value
 * @return {!proto.bc.miner.MinerRequest} returns this
*/
proto.bc.miner.MinerRequest.prototype.setLastPreviousBlock = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.clearLastPreviousBlock = function() {
  return this.setLastPreviousBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.miner.MinerRequest.prototype.hasLastPreviousBlock = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bc.core.BlockchainHeaders new_block_headers = 9;
 * @return {?proto.bc.core.BlockchainHeaders}
 */
proto.bc.miner.MinerRequest.prototype.getNewBlockHeaders = function() {
  return /** @type{?proto.bc.core.BlockchainHeaders} */ (
    jspb.Message.getWrapperField(this, core_pb.BlockchainHeaders, 9));
};


/**
 * @param {?proto.bc.core.BlockchainHeaders|undefined} value
 * @return {!proto.bc.miner.MinerRequest} returns this
*/
proto.bc.miner.MinerRequest.prototype.setNewBlockHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.miner.MinerRequest} returns this
 */
proto.bc.miner.MinerRequest.prototype.clearNewBlockHeaders = function() {
  return this.setNewBlockHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.miner.MinerRequest.prototype.hasNewBlockHeaders = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.miner.MinerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.miner.MinerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.miner.MinerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.MinerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 3, ""),
    distance: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    iterations: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timeDiff: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.miner.MinerResponse}
 */
proto.bc.miner.MinerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.miner.MinerResponse;
  return proto.bc.miner.MinerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.miner.MinerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.miner.MinerResponse}
 */
proto.bc.miner.MinerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bc.miner.MinerResponseResult} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIterations(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeDiff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.miner.MinerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.miner.MinerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.miner.MinerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.miner.MinerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDistance();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getIterations();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getTimeDiff();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional MinerResponseResult result = 1;
 * @return {!proto.bc.miner.MinerResponseResult}
 */
proto.bc.miner.MinerResponse.prototype.getResult = function() {
  return /** @type {!proto.bc.miner.MinerResponseResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bc.miner.MinerResponseResult} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.bc.miner.MinerResponse.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string difficulty = 3;
 * @return {string}
 */
proto.bc.miner.MinerResponse.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string distance = 4;
 * @return {string}
 */
proto.bc.miner.MinerResponse.prototype.getDistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setDistance = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.bc.miner.MinerResponse.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 iterations = 6;
 * @return {number}
 */
proto.bc.miner.MinerResponse.prototype.getIterations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setIterations = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 time_diff = 7;
 * @return {number}
 */
proto.bc.miner.MinerResponse.prototype.getTimeDiff = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.miner.MinerResponse} returns this
 */
proto.bc.miner.MinerResponse.prototype.setTimeDiff = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.bc.miner.MinerResponseResult = {
  CANCELED: 0,
  OK: 1,
  ERROR: 2
};

goog.object.extend(exports, proto.bc.miner);
