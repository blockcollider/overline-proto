// source: core.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bc.core.AppVersion', null, global);
goog.exportSymbol('proto.bc.core.BcBlock', null, global);
goog.exportSymbol('proto.bc.core.Block', null, global);
goog.exportSymbol('proto.bc.core.BlockchainHeader', null, global);
goog.exportSymbol('proto.bc.core.BlockchainHeaders', null, global);
goog.exportSymbol('proto.bc.core.MarkedTransaction', null, global);
goog.exportSymbol('proto.bc.core.Null', null, global);
goog.exportSymbol('proto.bc.core.OutPoint', null, global);
goog.exportSymbol('proto.bc.core.TetheredWork', null, global);
goog.exportSymbol('proto.bc.core.Transaction', null, global);
goog.exportSymbol('proto.bc.core.TransactionInput', null, global);
goog.exportSymbol('proto.bc.core.TransactionOutput', null, global);
goog.exportSymbol('proto.bc.core.UnspentTransactions', null, global);
goog.exportSymbol('proto.bc.core.Utxo', null, global);
goog.exportSymbol('proto.bc.core.Utxos', null, global);
goog.exportSymbol('proto.bc.core.WalletData', null, global);
goog.exportSymbol('proto.bc.core.WalletOutPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.Null = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.Null, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.Null.displayName = 'proto.bc.core.Null';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.Block.repeatedFields_, null);
};
goog.inherits(proto.bc.core.Block, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.Block.displayName = 'proto.bc.core.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.TetheredWork = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.TetheredWork, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.TetheredWork.displayName = 'proto.bc.core.TetheredWork';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.MarkedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.MarkedTransaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.MarkedTransaction.displayName = 'proto.bc.core.MarkedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.BlockchainHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.BlockchainHeaders.repeatedFields_, null);
};
goog.inherits(proto.bc.core.BlockchainHeaders, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.BlockchainHeaders.displayName = 'proto.bc.core.BlockchainHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.BcBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.BcBlock.repeatedFields_, null);
};
goog.inherits(proto.bc.core.BcBlock, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.BcBlock.displayName = 'proto.bc.core.BcBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.OutPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.OutPoint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.OutPoint.displayName = 'proto.bc.core.OutPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.WalletOutPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.WalletOutPoint, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.WalletOutPoint.displayName = 'proto.bc.core.WalletOutPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.WalletData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.WalletData.repeatedFields_, null);
};
goog.inherits(proto.bc.core.WalletData, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.WalletData.displayName = 'proto.bc.core.WalletData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.Transaction.repeatedFields_, null);
};
goog.inherits(proto.bc.core.Transaction, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.Transaction.displayName = 'proto.bc.core.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.UnspentTransactions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.UnspentTransactions.repeatedFields_, null);
};
goog.inherits(proto.bc.core.UnspentTransactions, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.UnspentTransactions.displayName = 'proto.bc.core.UnspentTransactions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.TransactionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.TransactionInput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.TransactionInput.displayName = 'proto.bc.core.TransactionInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.Utxos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.Utxos.repeatedFields_, null);
};
goog.inherits(proto.bc.core.Utxos, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.Utxos.displayName = 'proto.bc.core.Utxos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.Utxo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.Utxo, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.Utxo.displayName = 'proto.bc.core.Utxo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.TransactionOutput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.TransactionOutput, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.TransactionOutput.displayName = 'proto.bc.core.TransactionOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.BlockchainHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.core.BlockchainHeader.repeatedFields_, null);
};
goog.inherits(proto.bc.core.BlockchainHeader, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.BlockchainHeader.displayName = 'proto.bc.core.BlockchainHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.core.AppVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.core.AppVersion, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.core.AppVersion.displayName = 'proto.bc.core.AppVersion';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.Null.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.Null.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.Null} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Null.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.Null}
 */
proto.bc.core.Null.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.Null;
  return proto.bc.core.Null.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.Null}
 */
proto.bc.core.Null.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.Null.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.Null.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.Null} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Null.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.Block.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
    markedTxCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    markedTxsList: jspb.Message.toObjectList(msg.getMarkedTxsList(),
    proto.bc.core.MarkedTransaction.toObject, includeInstance),
    difficulty: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nonce: msg.getNonce_asB64(),
    proof: msg.getProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.Block}
 */
proto.bc.core.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.Block;
  return proto.bc.core.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.Block}
 */
proto.bc.core.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleRoot(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarkedTxCount(value);
      break;
    case 8:
      var value = new proto.bc.core.MarkedTransaction;
      reader.readMessage(value,proto.bc.core.MarkedTransaction.deserializeBinaryFromReader);
      msg.addMarkedTxs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDifficulty(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMarkedTxCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMarkedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.core.MarkedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.core.Block.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.core.Block.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string previous_hash = 3;
 * @return {string}
 */
proto.bc.core.Block.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.bc.core.Block.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.core.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.core.Block.prototype.getMerkleRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 marked_tx_count = 7;
 * @return {number}
 */
proto.bc.core.Block.prototype.getMarkedTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setMarkedTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated MarkedTransaction marked_txs = 8;
 * @return {!Array<!proto.bc.core.MarkedTransaction>}
 */
proto.bc.core.Block.prototype.getMarkedTxsList = function() {
  return /** @type{!Array<!proto.bc.core.MarkedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.MarkedTransaction, 8));
};


/**
 * @param {!Array<!proto.bc.core.MarkedTransaction>} value
 * @return {!proto.bc.core.Block} returns this
*/
proto.bc.core.Block.prototype.setMarkedTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.core.MarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.MarkedTransaction}
 */
proto.bc.core.Block.prototype.addMarkedTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.core.MarkedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.clearMarkedTxsList = function() {
  return this.setMarkedTxsList([]);
};


/**
 * optional uint64 difficulty = 9;
 * @return {number}
 */
proto.bc.core.Block.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes nonce = 10;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.Block.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes nonce = 10;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.bc.core.Block.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.bc.core.Block.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes proof = 11;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.Block.prototype.getProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes proof = 11;
 * This is a type-conversion wrapper around `getProof()`
 * @return {string}
 */
proto.bc.core.Block.prototype.getProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProof()));
};


/**
 * optional bytes proof = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProof()`
 * @return {!Uint8Array}
 */
proto.bc.core.Block.prototype.getProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.Block} returns this
 */
proto.bc.core.Block.prototype.setProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.TetheredWork.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.TetheredWork.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.TetheredWork} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TetheredWork.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockchain: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blockHash: msg.getBlockHash_asB64(),
    nonce: msg.getNonce_asB64(),
    difficulty: jspb.Message.getFieldWithDefault(msg, 5, 0),
    signature: msg.getSignature_asB64(),
    txPanel: msg.getTxPanel_asB64(),
    poolUrl: msg.getPoolUrl_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.TetheredWork}
 */
proto.bc.core.TetheredWork.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.TetheredWork;
  return proto.bc.core.TetheredWork.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.TetheredWork} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.TetheredWork}
 */
proto.bc.core.TetheredWork.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDifficulty(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxPanel(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoolUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.TetheredWork.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.TetheredWork} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TetheredWork.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getTxPanel_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getPoolUrl_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.core.TetheredWork.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string blockchain = 2;
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TetheredWork.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes block_hash = 3;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes nonce = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TetheredWork.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nonce = 4;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 difficulty = 5;
 * @return {number}
 */
proto.bc.core.TetheredWork.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes signature = 6;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TetheredWork.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes signature = 6;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes tx_panel = 7;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TetheredWork.prototype.getTxPanel = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes tx_panel = 7;
 * This is a type-conversion wrapper around `getTxPanel()`
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getTxPanel_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxPanel()));
};


/**
 * optional bytes tx_panel = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxPanel()`
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.getTxPanel_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxPanel()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setTxPanel = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes pool_url = 8;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TetheredWork.prototype.getPoolUrl = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes pool_url = 8;
 * This is a type-conversion wrapper around `getPoolUrl()`
 * @return {string}
 */
proto.bc.core.TetheredWork.prototype.getPoolUrl_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoolUrl()));
};


/**
 * optional bytes pool_url = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoolUrl()`
 * @return {!Uint8Array}
 */
proto.bc.core.TetheredWork.prototype.getPoolUrl_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoolUrl()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TetheredWork} returns this
 */
proto.bc.core.TetheredWork.prototype.setPoolUrl = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.MarkedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.MarkedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.MarkedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.MarkedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addrFrom: jspb.Message.getFieldWithDefault(msg, 5, ""),
    addrTo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    index: jspb.Message.getFieldWithDefault(msg, 8, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.MarkedTransaction}
 */
proto.bc.core.MarkedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.MarkedTransaction;
  return proto.bc.core.MarkedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.MarkedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.MarkedTransaction}
 */
proto.bc.core.MarkedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrFrom(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddrTo(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.MarkedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.MarkedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.MarkedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.MarkedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddrFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAddrTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.MarkedTransaction.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.core.MarkedTransaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string addr_from = 5;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getAddrFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setAddrFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string addr_to = 6;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getAddrTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setAddrTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 block_height = 7;
 * @return {number}
 */
proto.bc.core.MarkedTransaction.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 index = 8;
 * @return {number}
 */
proto.bc.core.MarkedTransaction.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string block_hash = 9;
 * @return {string}
 */
proto.bc.core.MarkedTransaction.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.MarkedTransaction} returns this
 */
proto.bc.core.MarkedTransaction.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.BlockchainHeaders.repeatedFields_ = [1,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.BlockchainHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.BlockchainHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.BlockchainHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BlockchainHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    btcList: jspb.Message.toObjectList(msg.getBtcList(),
    proto.bc.core.BlockchainHeader.toObject, includeInstance),
    ethList: jspb.Message.toObjectList(msg.getEthList(),
    proto.bc.core.BlockchainHeader.toObject, includeInstance),
    lskList: jspb.Message.toObjectList(msg.getLskList(),
    proto.bc.core.BlockchainHeader.toObject, includeInstance),
    neoList: jspb.Message.toObjectList(msg.getNeoList(),
    proto.bc.core.BlockchainHeader.toObject, includeInstance),
    wavList: jspb.Message.toObjectList(msg.getWavList(),
    proto.bc.core.BlockchainHeader.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.BlockchainHeaders}
 */
proto.bc.core.BlockchainHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.BlockchainHeaders;
  return proto.bc.core.BlockchainHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.BlockchainHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.BlockchainHeaders}
 */
proto.bc.core.BlockchainHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.core.BlockchainHeader;
      reader.readMessage(value,proto.bc.core.BlockchainHeader.deserializeBinaryFromReader);
      msg.addBtc(value);
      break;
    case 2:
      var value = new proto.bc.core.BlockchainHeader;
      reader.readMessage(value,proto.bc.core.BlockchainHeader.deserializeBinaryFromReader);
      msg.addEth(value);
      break;
    case 3:
      var value = new proto.bc.core.BlockchainHeader;
      reader.readMessage(value,proto.bc.core.BlockchainHeader.deserializeBinaryFromReader);
      msg.addLsk(value);
      break;
    case 4:
      var value = new proto.bc.core.BlockchainHeader;
      reader.readMessage(value,proto.bc.core.BlockchainHeader.deserializeBinaryFromReader);
      msg.addNeo(value);
      break;
    case 5:
      var value = new proto.bc.core.BlockchainHeader;
      reader.readMessage(value,proto.bc.core.BlockchainHeader.deserializeBinaryFromReader);
      msg.addWav(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.BlockchainHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.BlockchainHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.BlockchainHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BlockchainHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBtcList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.core.BlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getEthList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bc.core.BlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getLskList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bc.core.BlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getNeoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bc.core.BlockchainHeader.serializeBinaryToWriter
    );
  }
  f = message.getWavList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bc.core.BlockchainHeader.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlockchainHeader btc = 1;
 * @return {!Array<!proto.bc.core.BlockchainHeader>}
 */
proto.bc.core.BlockchainHeaders.prototype.getBtcList = function() {
  return /** @type{!Array<!proto.bc.core.BlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.BlockchainHeader, 1));
};


/**
 * @param {!Array<!proto.bc.core.BlockchainHeader>} value
 * @return {!proto.bc.core.BlockchainHeaders} returns this
*/
proto.bc.core.BlockchainHeaders.prototype.setBtcList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeaders.prototype.addBtc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.BlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeaders} returns this
 */
proto.bc.core.BlockchainHeaders.prototype.clearBtcList = function() {
  return this.setBtcList([]);
};


/**
 * repeated BlockchainHeader eth = 2;
 * @return {!Array<!proto.bc.core.BlockchainHeader>}
 */
proto.bc.core.BlockchainHeaders.prototype.getEthList = function() {
  return /** @type{!Array<!proto.bc.core.BlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.BlockchainHeader, 2));
};


/**
 * @param {!Array<!proto.bc.core.BlockchainHeader>} value
 * @return {!proto.bc.core.BlockchainHeaders} returns this
*/
proto.bc.core.BlockchainHeaders.prototype.setEthList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bc.core.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeaders.prototype.addEth = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bc.core.BlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeaders} returns this
 */
proto.bc.core.BlockchainHeaders.prototype.clearEthList = function() {
  return this.setEthList([]);
};


/**
 * repeated BlockchainHeader lsk = 3;
 * @return {!Array<!proto.bc.core.BlockchainHeader>}
 */
proto.bc.core.BlockchainHeaders.prototype.getLskList = function() {
  return /** @type{!Array<!proto.bc.core.BlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.BlockchainHeader, 3));
};


/**
 * @param {!Array<!proto.bc.core.BlockchainHeader>} value
 * @return {!proto.bc.core.BlockchainHeaders} returns this
*/
proto.bc.core.BlockchainHeaders.prototype.setLskList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bc.core.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeaders.prototype.addLsk = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bc.core.BlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeaders} returns this
 */
proto.bc.core.BlockchainHeaders.prototype.clearLskList = function() {
  return this.setLskList([]);
};


/**
 * repeated BlockchainHeader neo = 4;
 * @return {!Array<!proto.bc.core.BlockchainHeader>}
 */
proto.bc.core.BlockchainHeaders.prototype.getNeoList = function() {
  return /** @type{!Array<!proto.bc.core.BlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.BlockchainHeader, 4));
};


/**
 * @param {!Array<!proto.bc.core.BlockchainHeader>} value
 * @return {!proto.bc.core.BlockchainHeaders} returns this
*/
proto.bc.core.BlockchainHeaders.prototype.setNeoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bc.core.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeaders.prototype.addNeo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.core.BlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeaders} returns this
 */
proto.bc.core.BlockchainHeaders.prototype.clearNeoList = function() {
  return this.setNeoList([]);
};


/**
 * repeated BlockchainHeader wav = 5;
 * @return {!Array<!proto.bc.core.BlockchainHeader>}
 */
proto.bc.core.BlockchainHeaders.prototype.getWavList = function() {
  return /** @type{!Array<!proto.bc.core.BlockchainHeader>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.BlockchainHeader, 5));
};


/**
 * @param {!Array<!proto.bc.core.BlockchainHeader>} value
 * @return {!proto.bc.core.BlockchainHeaders} returns this
*/
proto.bc.core.BlockchainHeaders.prototype.setWavList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bc.core.BlockchainHeader=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeaders.prototype.addWav = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bc.core.BlockchainHeader, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeaders} returns this
 */
proto.bc.core.BlockchainHeaders.prototype.clearWavList = function() {
  return this.setWavList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.BcBlock.repeatedFields_ = [16,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.BcBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.BcBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.BcBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BcBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    schemaVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    miner: jspb.Message.getFieldWithDefault(msg, 6, ""),
    difficulty: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    merkleRoot: jspb.Message.getFieldWithDefault(msg, 9, ""),
    chainRoot: jspb.Message.getFieldWithDefault(msg, 10, ""),
    distance: jspb.Message.getFieldWithDefault(msg, 11, ""),
    totalDistance: jspb.Message.getFieldWithDefault(msg, 12, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 13, ""),
    nrgGrant: jspb.Message.getFieldWithDefault(msg, 14, 0),
    twn: jspb.Message.getFieldWithDefault(msg, 15, 0),
    twsList: jspb.Message.toObjectList(msg.getTwsList(),
    proto.bc.core.TetheredWork.toObject, includeInstance),
    emblemWeight: jspb.Message.getFieldWithDefault(msg, 17, 0),
    emblemChainFingerprintRoot: jspb.Message.getFieldWithDefault(msg, 18, ""),
    emblemChainAddress: jspb.Message.getFieldWithDefault(msg, 19, ""),
    txCount: jspb.Message.getFieldWithDefault(msg, 20, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.bc.core.Transaction.toObject, includeInstance),
    txFeeBase: jspb.Message.getFieldWithDefault(msg, 22, 0),
    txDistanceSumLimit: jspb.Message.getFieldWithDefault(msg, 23, 0),
    blockchainHeadersCount: jspb.Message.getFieldWithDefault(msg, 24, 0),
    blockchainHeaders: (f = msg.getBlockchainHeaders()) && proto.bc.core.BlockchainHeaders.toObject(includeInstance, f),
    blockchainFingerprintsRoot: jspb.Message.getFieldWithDefault(msg, 26, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.BcBlock}
 */
proto.bc.core.BcBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.BcBlock;
  return proto.bc.core.BcBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.BcBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.BcBlock}
 */
proto.bc.core.BcBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSchemaVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMiner(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDifficulty(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleRoot(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainRoot(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistance(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalDistance(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNrgGrant(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTwn(value);
      break;
    case 16:
      var value = new proto.bc.core.TetheredWork;
      reader.readMessage(value,proto.bc.core.TetheredWork.deserializeBinaryFromReader);
      msg.addTws(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEmblemWeight(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmblemChainFingerprintRoot(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmblemChainAddress(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxCount(value);
      break;
    case 21:
      var value = new proto.bc.core.Transaction;
      reader.readMessage(value,proto.bc.core.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxFeeBase(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxDistanceSumLimit(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockchainHeadersCount(value);
      break;
    case 25:
      var value = new proto.bc.core.BlockchainHeaders;
      reader.readMessage(value,proto.bc.core.BlockchainHeaders.deserializeBinaryFromReader);
      msg.setBlockchainHeaders(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchainFingerprintsRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.BcBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.BcBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.BcBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BcBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSchemaVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMiner();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDifficulty();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getChainRoot();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDistance();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTotalDistance();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getNrgGrant();
  if (f !== 0) {
    writer.writeUint64(
      14,
      f
    );
  }
  f = message.getTwn();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getTwsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.bc.core.TetheredWork.serializeBinaryToWriter
    );
  }
  f = message.getEmblemWeight();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getEmblemChainFingerprintRoot();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getEmblemChainAddress();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.bc.core.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getTxFeeBase();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getTxDistanceSumLimit();
  if (f !== 0) {
    writer.writeUint64(
      23,
      f
    );
  }
  f = message.getBlockchainHeadersCount();
  if (f !== 0) {
    writer.writeUint64(
      24,
      f
    );
  }
  f = message.getBlockchainHeaders();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.bc.core.BlockchainHeaders.serializeBinaryToWriter
    );
  }
  f = message.getBlockchainFingerprintsRoot();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string previous_hash = 2;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 schema_version = 4;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getSchemaVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setSchemaVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string miner = 6;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getMiner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setMiner = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string difficulty = 7;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getDifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 timestamp = 8;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string merkle_root = 9;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getMerkleRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string chain_root = 10;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getChainRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setChainRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string distance = 11;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getDistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setDistance = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string total_distance = 12;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getTotalDistance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTotalDistance = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string nonce = 13;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint64 nrg_grant = 14;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getNrgGrant = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setNrgGrant = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint64 twn = 15;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getTwn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTwn = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated TetheredWork tws = 16;
 * @return {!Array<!proto.bc.core.TetheredWork>}
 */
proto.bc.core.BcBlock.prototype.getTwsList = function() {
  return /** @type{!Array<!proto.bc.core.TetheredWork>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.TetheredWork, 16));
};


/**
 * @param {!Array<!proto.bc.core.TetheredWork>} value
 * @return {!proto.bc.core.BcBlock} returns this
*/
proto.bc.core.BcBlock.prototype.setTwsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.bc.core.TetheredWork=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.TetheredWork}
 */
proto.bc.core.BcBlock.prototype.addTws = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.bc.core.TetheredWork, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.clearTwsList = function() {
  return this.setTwsList([]);
};


/**
 * optional uint64 emblem_weight = 17;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getEmblemWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setEmblemWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string emblem_chain_fingerprint_root = 18;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getEmblemChainFingerprintRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setEmblemChainFingerprintRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string emblem_chain_address = 19;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getEmblemChainAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setEmblemChainAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint64 tx_count = 20;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * repeated Transaction txs = 21;
 * @return {!Array<!proto.bc.core.Transaction>}
 */
proto.bc.core.BcBlock.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.bc.core.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.Transaction, 21));
};


/**
 * @param {!Array<!proto.bc.core.Transaction>} value
 * @return {!proto.bc.core.BcBlock} returns this
*/
proto.bc.core.BcBlock.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.bc.core.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.Transaction}
 */
proto.bc.core.BcBlock.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.bc.core.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional uint64 tx_fee_base = 22;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getTxFeeBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTxFeeBase = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint64 tx_distance_sum_limit = 23;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getTxDistanceSumLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setTxDistanceSumLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint64 blockchain_headers_count = 24;
 * @return {number}
 */
proto.bc.core.BcBlock.prototype.getBlockchainHeadersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setBlockchainHeadersCount = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional BlockchainHeaders blockchain_headers = 25;
 * @return {?proto.bc.core.BlockchainHeaders}
 */
proto.bc.core.BcBlock.prototype.getBlockchainHeaders = function() {
  return /** @type{?proto.bc.core.BlockchainHeaders} */ (
    jspb.Message.getWrapperField(this, proto.bc.core.BlockchainHeaders, 25));
};


/**
 * @param {?proto.bc.core.BlockchainHeaders|undefined} value
 * @return {!proto.bc.core.BcBlock} returns this
*/
proto.bc.core.BcBlock.prototype.setBlockchainHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.clearBlockchainHeaders = function() {
  return this.setBlockchainHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.core.BcBlock.prototype.hasBlockchainHeaders = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional string blockchain_fingerprints_root = 26;
 * @return {string}
 */
proto.bc.core.BcBlock.prototype.getBlockchainFingerprintsRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BcBlock} returns this
 */
proto.bc.core.BcBlock.prototype.setBlockchainFingerprintsRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.OutPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.OutPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.OutPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.OutPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.OutPoint}
 */
proto.bc.core.OutPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.OutPoint;
  return proto.bc.core.OutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.OutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.OutPoint}
 */
proto.bc.core.OutPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.OutPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.OutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.OutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.OutPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.OutPoint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.core.OutPoint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.core.OutPoint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.OutPoint} returns this
 */
proto.bc.core.OutPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.core.OutPoint.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.OutPoint} returns this
 */
proto.bc.core.OutPoint.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.bc.core.OutPoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.OutPoint} returns this
 */
proto.bc.core.OutPoint.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.WalletOutPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.WalletOutPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.WalletOutPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.WalletOutPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    outpoint: (f = msg.getOutpoint()) && proto.bc.core.OutPoint.toObject(includeInstance, f),
    callbackScript: msg.getCallbackScript_asB64(),
    originalScript: msg.getOriginalScript_asB64(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletOutPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.WalletOutPoint;
  return proto.bc.core.WalletOutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.WalletOutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletOutPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.core.OutPoint;
      reader.readMessage(value,proto.bc.core.OutPoint.deserializeBinaryFromReader);
      msg.setOutpoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCallbackScript(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOriginalScript(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.WalletOutPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.WalletOutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.WalletOutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.WalletOutPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutpoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.core.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getCallbackScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOriginalScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional OutPoint outpoint = 1;
 * @return {?proto.bc.core.OutPoint}
 */
proto.bc.core.WalletOutPoint.prototype.getOutpoint = function() {
  return /** @type{?proto.bc.core.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.bc.core.OutPoint, 1));
};


/**
 * @param {?proto.bc.core.OutPoint|undefined} value
 * @return {!proto.bc.core.WalletOutPoint} returns this
*/
proto.bc.core.WalletOutPoint.prototype.setOutpoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.core.WalletOutPoint} returns this
 */
proto.bc.core.WalletOutPoint.prototype.clearOutpoint = function() {
  return this.setOutpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.core.WalletOutPoint.prototype.hasOutpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes callback_script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.WalletOutPoint.prototype.getCallbackScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes callback_script = 2;
 * This is a type-conversion wrapper around `getCallbackScript()`
 * @return {string}
 */
proto.bc.core.WalletOutPoint.prototype.getCallbackScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCallbackScript()));
};


/**
 * optional bytes callback_script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCallbackScript()`
 * @return {!Uint8Array}
 */
proto.bc.core.WalletOutPoint.prototype.getCallbackScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCallbackScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.WalletOutPoint} returns this
 */
proto.bc.core.WalletOutPoint.prototype.setCallbackScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes original_script = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.WalletOutPoint.prototype.getOriginalScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes original_script = 3;
 * This is a type-conversion wrapper around `getOriginalScript()`
 * @return {string}
 */
proto.bc.core.WalletOutPoint.prototype.getOriginalScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOriginalScript()));
};


/**
 * optional bytes original_script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginalScript()`
 * @return {!Uint8Array}
 */
proto.bc.core.WalletOutPoint.prototype.getOriginalScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOriginalScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.WalletOutPoint} returns this
 */
proto.bc.core.WalletOutPoint.prototype.setOriginalScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.bc.core.WalletOutPoint.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.WalletOutPoint} returns this
 */
proto.bc.core.WalletOutPoint.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.WalletData.repeatedFields_ = [3,4,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.WalletData.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.WalletData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.WalletData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.WalletData.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unconfirmedSpendableOutpointsList: jspb.Message.toObjectList(msg.getUnconfirmedSpendableOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance),
    spendableOutpointsList: jspb.Message.toObjectList(msg.getSpendableOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance),
    collateralizedMakerOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedMakerOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance),
    collateralizedUnmatchedOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedUnmatchedOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance),
    collateralizedMatchedOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedMatchedOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance),
    collateralizedSpendableOutpointsList: jspb.Message.toObjectList(msg.getCollateralizedSpendableOutpointsList(),
    proto.bc.core.WalletOutPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.WalletData}
 */
proto.bc.core.WalletData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.WalletData;
  return proto.bc.core.WalletData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.WalletData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.WalletData}
 */
proto.bc.core.WalletData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 3:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addUnconfirmedSpendableOutpoints(value);
      break;
    case 4:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addSpendableOutpoints(value);
      break;
    case 5:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addCollateralizedMakerOutpoints(value);
      break;
    case 6:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addCollateralizedUnmatchedOutpoints(value);
      break;
    case 7:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addCollateralizedMatchedOutpoints(value);
      break;
    case 8:
      var value = new proto.bc.core.WalletOutPoint;
      reader.readMessage(value,proto.bc.core.WalletOutPoint.deserializeBinaryFromReader);
      msg.addCollateralizedSpendableOutpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.WalletData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.WalletData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.WalletData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.WalletData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnconfirmedSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getCollateralizedMakerOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getCollateralizedUnmatchedOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getCollateralizedMatchedOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
  f = message.getCollateralizedSpendableOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.core.WalletOutPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 block_height = 1;
 * @return {number}
 */
proto.bc.core.WalletData.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string block_hash = 2;
 * @return {string}
 */
proto.bc.core.WalletData.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated WalletOutPoint unconfirmed_spendable_outpoints = 3;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getUnconfirmedSpendableOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 3));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setUnconfirmedSpendableOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addUnconfirmedSpendableOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearUnconfirmedSpendableOutpointsList = function() {
  return this.setUnconfirmedSpendableOutpointsList([]);
};


/**
 * repeated WalletOutPoint spendable_outpoints = 4;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getSpendableOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 4));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setSpendableOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addSpendableOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearSpendableOutpointsList = function() {
  return this.setSpendableOutpointsList([]);
};


/**
 * repeated WalletOutPoint collateralized_maker_outpoints = 5;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getCollateralizedMakerOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 5));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setCollateralizedMakerOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addCollateralizedMakerOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearCollateralizedMakerOutpointsList = function() {
  return this.setCollateralizedMakerOutpointsList([]);
};


/**
 * repeated WalletOutPoint collateralized_unmatched_outpoints = 6;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getCollateralizedUnmatchedOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 6));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setCollateralizedUnmatchedOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addCollateralizedUnmatchedOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearCollateralizedUnmatchedOutpointsList = function() {
  return this.setCollateralizedUnmatchedOutpointsList([]);
};


/**
 * repeated WalletOutPoint collateralized_matched_outpoints = 7;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getCollateralizedMatchedOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 7));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setCollateralizedMatchedOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addCollateralizedMatchedOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearCollateralizedMatchedOutpointsList = function() {
  return this.setCollateralizedMatchedOutpointsList([]);
};


/**
 * repeated WalletOutPoint collateralized_spendable_outpoints = 8;
 * @return {!Array<!proto.bc.core.WalletOutPoint>}
 */
proto.bc.core.WalletData.prototype.getCollateralizedSpendableOutpointsList = function() {
  return /** @type{!Array<!proto.bc.core.WalletOutPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.WalletOutPoint, 8));
};


/**
 * @param {!Array<!proto.bc.core.WalletOutPoint>} value
 * @return {!proto.bc.core.WalletData} returns this
*/
proto.bc.core.WalletData.prototype.setCollateralizedSpendableOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.core.WalletOutPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.WalletOutPoint}
 */
proto.bc.core.WalletData.prototype.addCollateralizedSpendableOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.core.WalletOutPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.WalletData} returns this
 */
proto.bc.core.WalletData.prototype.clearCollateralizedSpendableOutpointsList = function() {
  return this.setCollateralizedSpendableOutpointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.Transaction.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    overline: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ninCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    noutCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.bc.core.TransactionInput.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.bc.core.TransactionOutput.toObject, includeInstance),
    lockTime: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.Transaction}
 */
proto.bc.core.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.Transaction;
  return proto.bc.core.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.Transaction}
 */
proto.bc.core.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverline(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNinCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNoutCount(value);
      break;
    case 7:
      var value = new proto.bc.core.TransactionInput;
      reader.readMessage(value,proto.bc.core.TransactionInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 8:
      var value = new proto.bc.core.TransactionOutput;
      reader.readMessage(value,proto.bc.core.TransactionOutput.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOverline();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNinCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNoutCount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.bc.core.TransactionInput.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.core.TransactionOutput.serializeBinaryToWriter
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.bc.core.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string nonce = 2;
 * @return {string}
 */
proto.bc.core.Transaction.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hash = 3;
 * @return {string}
 */
proto.bc.core.Transaction.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string overline = 4;
 * @return {string}
 */
proto.bc.core.Transaction.prototype.getOverline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setOverline = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 nin_count = 5;
 * @return {number}
 */
proto.bc.core.Transaction.prototype.getNinCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setNinCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 nout_count = 6;
 * @return {number}
 */
proto.bc.core.Transaction.prototype.getNoutCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setNoutCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated TransactionInput inputs = 7;
 * @return {!Array<!proto.bc.core.TransactionInput>}
 */
proto.bc.core.Transaction.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.bc.core.TransactionInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.TransactionInput, 7));
};


/**
 * @param {!Array<!proto.bc.core.TransactionInput>} value
 * @return {!proto.bc.core.Transaction} returns this
*/
proto.bc.core.Transaction.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.bc.core.TransactionInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.TransactionInput}
 */
proto.bc.core.Transaction.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.bc.core.TransactionInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * repeated TransactionOutput outputs = 8;
 * @return {!Array<!proto.bc.core.TransactionOutput>}
 */
proto.bc.core.Transaction.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.bc.core.TransactionOutput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.TransactionOutput, 8));
};


/**
 * @param {!Array<!proto.bc.core.TransactionOutput>} value
 * @return {!proto.bc.core.Transaction} returns this
*/
proto.bc.core.Transaction.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.core.TransactionOutput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.TransactionOutput}
 */
proto.bc.core.Transaction.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.core.TransactionOutput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * optional uint32 lock_time = 9;
 * @return {number}
 */
proto.bc.core.Transaction.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Transaction} returns this
 */
proto.bc.core.Transaction.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.UnspentTransactions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.UnspentTransactions.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.UnspentTransactions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.UnspentTransactions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.UnspentTransactions.toObject = function(includeInstance, msg) {
  var f, obj = {
    utxoList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.UnspentTransactions}
 */
proto.bc.core.UnspentTransactions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.UnspentTransactions;
  return proto.bc.core.UnspentTransactions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.UnspentTransactions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.UnspentTransactions}
 */
proto.bc.core.UnspentTransactions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUtxo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.UnspentTransactions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.UnspentTransactions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.UnspentTransactions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.UnspentTransactions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtxoList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string utxo = 1;
 * @return {!Array<string>}
 */
proto.bc.core.UnspentTransactions.prototype.getUtxoList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.bc.core.UnspentTransactions} returns this
 */
proto.bc.core.UnspentTransactions.prototype.setUtxoList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.bc.core.UnspentTransactions} returns this
 */
proto.bc.core.UnspentTransactions.prototype.addUtxo = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.UnspentTransactions} returns this
 */
proto.bc.core.UnspentTransactions.prototype.clearUtxoList = function() {
  return this.setUtxoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.TransactionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.TransactionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.TransactionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TransactionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    outPoint: (f = msg.getOutPoint()) && proto.bc.core.OutPoint.toObject(includeInstance, f),
    scriptLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    inputScript: msg.getInputScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.TransactionInput}
 */
proto.bc.core.TransactionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.TransactionInput;
  return proto.bc.core.TransactionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.TransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.TransactionInput}
 */
proto.bc.core.TransactionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.core.OutPoint;
      reader.readMessage(value,proto.bc.core.OutPoint.deserializeBinaryFromReader);
      msg.setOutPoint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScriptLength(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInputScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.TransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.TransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TransactionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.core.OutPoint.serializeBinaryToWriter
    );
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getInputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional OutPoint out_point = 1;
 * @return {?proto.bc.core.OutPoint}
 */
proto.bc.core.TransactionInput.prototype.getOutPoint = function() {
  return /** @type{?proto.bc.core.OutPoint} */ (
    jspb.Message.getWrapperField(this, proto.bc.core.OutPoint, 1));
};


/**
 * @param {?proto.bc.core.OutPoint|undefined} value
 * @return {!proto.bc.core.TransactionInput} returns this
*/
proto.bc.core.TransactionInput.prototype.setOutPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.core.TransactionInput} returns this
 */
proto.bc.core.TransactionInput.prototype.clearOutPoint = function() {
  return this.setOutPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.core.TransactionInput.prototype.hasOutPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 script_length = 2;
 * @return {number}
 */
proto.bc.core.TransactionInput.prototype.getScriptLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.TransactionInput} returns this
 */
proto.bc.core.TransactionInput.prototype.setScriptLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes input_script = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TransactionInput.prototype.getInputScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes input_script = 3;
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {string}
 */
proto.bc.core.TransactionInput.prototype.getInputScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInputScript()));
};


/**
 * optional bytes input_script = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputScript()`
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionInput.prototype.getInputScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInputScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TransactionInput} returns this
 */
proto.bc.core.TransactionInput.prototype.setInputScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.Utxos.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.Utxos.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.Utxos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.Utxos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Utxos.toObject = function(includeInstance, msg) {
  var f, obj = {
    utxoList: jspb.Message.toObjectList(msg.getUtxoList(),
    proto.bc.core.Utxo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.Utxos}
 */
proto.bc.core.Utxos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.Utxos;
  return proto.bc.core.Utxos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.Utxos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.Utxos}
 */
proto.bc.core.Utxos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.core.Utxo;
      reader.readMessage(value,proto.bc.core.Utxo.deserializeBinaryFromReader);
      msg.addUtxo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.Utxos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.Utxos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.Utxos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Utxos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUtxoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.bc.core.Utxo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Utxo utxo = 1;
 * @return {!Array<!proto.bc.core.Utxo>}
 */
proto.bc.core.Utxos.prototype.getUtxoList = function() {
  return /** @type{!Array<!proto.bc.core.Utxo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.Utxo, 1));
};


/**
 * @param {!Array<!proto.bc.core.Utxo>} value
 * @return {!proto.bc.core.Utxos} returns this
*/
proto.bc.core.Utxos.prototype.setUtxoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.bc.core.Utxo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.Utxo}
 */
proto.bc.core.Utxos.prototype.addUtxo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.bc.core.Utxo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.Utxos} returns this
 */
proto.bc.core.Utxos.prototype.clearUtxoList = function() {
  return this.setUtxoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.Utxo.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.Utxo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.Utxo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Utxo.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: (f = msg.getOutput()) && proto.bc.core.TransactionOutput.toObject(includeInstance, f),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    coinbase: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.Utxo}
 */
proto.bc.core.Utxo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.Utxo;
  return proto.bc.core.Utxo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.Utxo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.Utxo}
 */
proto.bc.core.Utxo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bc.core.TransactionOutput;
      reader.readMessage(value,proto.bc.core.TransactionOutput.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCoinbase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.Utxo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.Utxo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.Utxo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.Utxo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bc.core.TransactionOutput.serializeBinaryToWriter
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCoinbase();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional TransactionOutput output = 1;
 * @return {?proto.bc.core.TransactionOutput}
 */
proto.bc.core.Utxo.prototype.getOutput = function() {
  return /** @type{?proto.bc.core.TransactionOutput} */ (
    jspb.Message.getWrapperField(this, proto.bc.core.TransactionOutput, 1));
};


/**
 * @param {?proto.bc.core.TransactionOutput|undefined} value
 * @return {!proto.bc.core.Utxo} returns this
*/
proto.bc.core.Utxo.prototype.setOutput = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.clearOutput = function() {
  return this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bc.core.Utxo.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.bc.core.Utxo.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 tx_index = 3;
 * @return {number}
 */
proto.bc.core.Utxo.prototype.getTxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.setTxIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string block_hash = 4;
 * @return {string}
 */
proto.bc.core.Utxo.prototype.getBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.bc.core.Utxo.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool coinbase = 6;
 * @return {boolean}
 */
proto.bc.core.Utxo.prototype.getCoinbase = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.bc.core.Utxo} returns this
 */
proto.bc.core.Utxo.prototype.setCoinbase = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.TransactionOutput.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.TransactionOutput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.TransactionOutput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TransactionOutput.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64(),
    unit: msg.getUnit_asB64(),
    scriptLength: jspb.Message.getFieldWithDefault(msg, 3, 0),
    outputScript: msg.getOutputScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.TransactionOutput}
 */
proto.bc.core.TransactionOutput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.TransactionOutput;
  return proto.bc.core.TransactionOutput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.TransactionOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.TransactionOutput}
 */
proto.bc.core.TransactionOutput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScriptLength(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutputScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionOutput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.TransactionOutput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.TransactionOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.TransactionOutput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUnit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getScriptLength();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOutputScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TransactionOutput.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.bc.core.TransactionOutput.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionOutput.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TransactionOutput} returns this
 */
proto.bc.core.TransactionOutput.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes unit = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TransactionOutput.prototype.getUnit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes unit = 2;
 * This is a type-conversion wrapper around `getUnit()`
 * @return {string}
 */
proto.bc.core.TransactionOutput.prototype.getUnit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnit()));
};


/**
 * optional bytes unit = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnit()`
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionOutput.prototype.getUnit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TransactionOutput} returns this
 */
proto.bc.core.TransactionOutput.prototype.setUnit = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 script_length = 3;
 * @return {number}
 */
proto.bc.core.TransactionOutput.prototype.getScriptLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.TransactionOutput} returns this
 */
proto.bc.core.TransactionOutput.prototype.setScriptLength = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes output_script = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.core.TransactionOutput.prototype.getOutputScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes output_script = 4;
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {string}
 */
proto.bc.core.TransactionOutput.prototype.getOutputScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutputScript()));
};


/**
 * optional bytes output_script = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputScript()`
 * @return {!Uint8Array}
 */
proto.bc.core.TransactionOutput.prototype.getOutputScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutputScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.core.TransactionOutput} returns this
 */
proto.bc.core.TransactionOutput.prototype.setOutputScript = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.core.BlockchainHeader.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.BlockchainHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.BlockchainHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.BlockchainHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BlockchainHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockchain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    previousHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    height: jspb.Message.getFieldWithDefault(msg, 5, 0),
    merkleRoot: jspb.Message.getFieldWithDefault(msg, 6, ""),
    blockchainConfirmationsInParentCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    markedTxsList: jspb.Message.toObjectList(msg.getMarkedTxsList(),
    proto.bc.core.MarkedTransaction.toObject, includeInstance),
    markedTxCount: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.BlockchainHeader;
  return proto.bc.core.BlockchainHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.BlockchainHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.BlockchainHeader}
 */
proto.bc.core.BlockchainHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousHash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerkleRoot(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockchainConfirmationsInParentCount(value);
      break;
    case 8:
      var value = new proto.bc.core.MarkedTransaction;
      reader.readMessage(value,proto.bc.core.MarkedTransaction.deserializeBinaryFromReader);
      msg.addMarkedTxs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarkedTxCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.BlockchainHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.BlockchainHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.BlockchainHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.BlockchainHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreviousHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMerkleRoot();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBlockchainConfirmationsInParentCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMarkedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.bc.core.MarkedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getMarkedTxCount();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional string blockchain = 1;
 * @return {string}
 */
proto.bc.core.BlockchainHeader.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.bc.core.BlockchainHeader.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string previous_hash = 3;
 * @return {string}
 */
proto.bc.core.BlockchainHeader.prototype.getPreviousHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 timestamp = 4;
 * @return {number}
 */
proto.bc.core.BlockchainHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 height = 5;
 * @return {number}
 */
proto.bc.core.BlockchainHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string merkle_root = 6;
 * @return {string}
 */
proto.bc.core.BlockchainHeader.prototype.getMerkleRoot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 blockchain_confirmations_in_parent_count = 7;
 * @return {number}
 */
proto.bc.core.BlockchainHeader.prototype.getBlockchainConfirmationsInParentCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setBlockchainConfirmationsInParentCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated MarkedTransaction marked_txs = 8;
 * @return {!Array<!proto.bc.core.MarkedTransaction>}
 */
proto.bc.core.BlockchainHeader.prototype.getMarkedTxsList = function() {
  return /** @type{!Array<!proto.bc.core.MarkedTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.core.MarkedTransaction, 8));
};


/**
 * @param {!Array<!proto.bc.core.MarkedTransaction>} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
*/
proto.bc.core.BlockchainHeader.prototype.setMarkedTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.bc.core.MarkedTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.core.MarkedTransaction}
 */
proto.bc.core.BlockchainHeader.prototype.addMarkedTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.bc.core.MarkedTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.clearMarkedTxsList = function() {
  return this.setMarkedTxsList([]);
};


/**
 * optional uint64 marked_tx_count = 9;
 * @return {number}
 */
proto.bc.core.BlockchainHeader.prototype.getMarkedTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.BlockchainHeader} returns this
 */
proto.bc.core.BlockchainHeader.prototype.setMarkedTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.core.AppVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.core.AppVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.core.AppVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.AppVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commit: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dbVersion: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.core.AppVersion}
 */
proto.bc.core.AppVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.core.AppVersion;
  return proto.bc.core.AppVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.core.AppVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.core.AppVersion}
 */
proto.bc.core.AppVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDbVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.core.AppVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.core.AppVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.core.AppVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.core.AppVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDbVersion();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.bc.core.AppVersion.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.AppVersion} returns this
 */
proto.bc.core.AppVersion.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commit = 2;
 * @return {string}
 */
proto.bc.core.AppVersion.prototype.getCommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.core.AppVersion} returns this
 */
proto.bc.core.AppVersion.prototype.setCommit = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 db_version = 3;
 * @return {number}
 */
proto.bc.core.AppVersion.prototype.getDbVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.core.AppVersion} returns this
 */
proto.bc.core.AppVersion.prototype.setDbVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.bc.core);
