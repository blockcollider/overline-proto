// source: oland.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bc.oland.Plot', null, global);
goog.exportSymbol('proto.bc.oland.PlotAttribute', null, global);
goog.exportSymbol('proto.bc.oland.PlotPanel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.oland.Plot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.oland.Plot.repeatedFields_, null);
};
goog.inherits(proto.bc.oland.Plot, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.oland.Plot.displayName = 'proto.bc.oland.Plot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.oland.PlotAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bc.oland.PlotAttribute, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.oland.PlotAttribute.displayName = 'proto.bc.oland.PlotAttribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bc.oland.PlotPanel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bc.oland.PlotPanel.repeatedFields_, null);
};
goog.inherits(proto.bc.oland.PlotPanel, jspb.Message);
if (true || goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bc.oland.PlotPanel.displayName = 'proto.bc.oland.PlotPanel';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.oland.Plot.repeatedFields_ = [14,15,16,17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.oland.Plot.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.oland.Plot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.oland.Plot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.Plot.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    plotNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockchain: jspb.Message.getFieldWithDefault(msg, 4, ""),
    distance: jspb.Message.getFieldWithDefault(msg, 5, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    plotAttrsCount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    nonce: msg.getNonce_asB64(),
    merkleRoot: msg.getMerkleRoot_asB64(),
    signature: msg.getSignature_asB64(),
    ownerCount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    markedTxHashesCount: jspb.Message.getFieldWithDefault(msg, 12, 0),
    embHashesCount: jspb.Message.getFieldWithDefault(msg, 13, 0),
    ownersList: msg.getOwnersList_asB64(),
    markedTxsHashesList: msg.getMarkedTxsHashesList_asB64(),
    embHashesList: msg.getEmbHashesList_asB64(),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.bc.oland.PlotAttribute.toObject, includeInstance),
    panelsList: jspb.Message.toObjectList(msg.getPanelsList(),
    proto.bc.oland.PlotPanel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.oland.Plot}
 */
proto.bc.oland.Plot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.oland.Plot;
  return proto.bc.oland.Plot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.oland.Plot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.oland.Plot}
 */
proto.bc.oland.Plot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlotNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchain(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDistance(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlotAttrsCount(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerkleRoot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerCount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMarkedTxHashesCount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEmbHashesCount(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOwners(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMarkedTxsHashes(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addEmbHashes(value);
      break;
    case 17:
      var value = new proto.bc.oland.PlotAttribute;
      reader.readMessage(value,proto.bc.oland.PlotAttribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 18:
      var value = new proto.bc.oland.PlotPanel;
      reader.readMessage(value,proto.bc.oland.PlotPanel.deserializeBinaryFromReader);
      msg.addPanels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.oland.Plot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.oland.Plot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.oland.Plot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.Plot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPlotNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockchain();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPlotAttrsCount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getMerkleRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getOwnerCount();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getMarkedTxHashesCount();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getEmbHashesCount();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getOwnersList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      14,
      f
    );
  }
  f = message.getMarkedTxsHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      15,
      f
    );
  }
  f = message.getEmbHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      16,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.bc.oland.PlotAttribute.serializeBinaryToWriter
    );
  }
  f = message.getPanelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.bc.oland.PlotPanel.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.Plot.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.bc.oland.Plot.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.bc.oland.Plot.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 plot_number = 2;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getPlotNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setPlotNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string blockchain = 4;
 * @return {string}
 */
proto.bc.oland.Plot.prototype.getBlockchain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setBlockchain = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 distance = 5;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 timestamp = 6;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 plot_attrs_count = 7;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getPlotAttrsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setPlotAttrsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes nonce = 8;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.Plot.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes nonce = 8;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.bc.oland.Plot.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.bc.oland.Plot.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes merkle_root = 9;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.Plot.prototype.getMerkleRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes merkle_root = 9;
 * This is a type-conversion wrapper around `getMerkleRoot()`
 * @return {string}
 */
proto.bc.oland.Plot.prototype.getMerkleRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerkleRoot()));
};


/**
 * optional bytes merkle_root = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleRoot()`
 * @return {!Uint8Array}
 */
proto.bc.oland.Plot.prototype.getMerkleRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerkleRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setMerkleRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes signature = 10;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.Plot.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes signature = 10;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.bc.oland.Plot.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.bc.oland.Plot.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint64 owner_count = 11;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getOwnerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setOwnerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 marked_tx_hashes_count = 12;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getMarkedTxHashesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setMarkedTxHashesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 emb_hashes_count = 13;
 * @return {number}
 */
proto.bc.oland.Plot.prototype.getEmbHashesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setEmbHashesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * repeated bytes owners = 14;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bc.oland.Plot.prototype.getOwnersList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * repeated bytes owners = 14;
 * This is a type-conversion wrapper around `getOwnersList()`
 * @return {!Array<string>}
 */
proto.bc.oland.Plot.prototype.getOwnersList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOwnersList()));
};


/**
 * repeated bytes owners = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnersList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bc.oland.Plot.prototype.getOwnersList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOwnersList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setOwnersList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.addOwners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.clearOwnersList = function() {
  return this.setOwnersList([]);
};


/**
 * repeated bytes marked_txs_hashes = 15;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bc.oland.Plot.prototype.getMarkedTxsHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * repeated bytes marked_txs_hashes = 15;
 * This is a type-conversion wrapper around `getMarkedTxsHashesList()`
 * @return {!Array<string>}
 */
proto.bc.oland.Plot.prototype.getMarkedTxsHashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMarkedTxsHashesList()));
};


/**
 * repeated bytes marked_txs_hashes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMarkedTxsHashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bc.oland.Plot.prototype.getMarkedTxsHashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMarkedTxsHashesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setMarkedTxsHashesList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.addMarkedTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.clearMarkedTxsHashesList = function() {
  return this.setMarkedTxsHashesList([]);
};


/**
 * repeated bytes emb_hashes = 16;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bc.oland.Plot.prototype.getEmbHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * repeated bytes emb_hashes = 16;
 * This is a type-conversion wrapper around `getEmbHashesList()`
 * @return {!Array<string>}
 */
proto.bc.oland.Plot.prototype.getEmbHashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getEmbHashesList()));
};


/**
 * repeated bytes emb_hashes = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEmbHashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bc.oland.Plot.prototype.getEmbHashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getEmbHashesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.setEmbHashesList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.addEmbHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.clearEmbHashesList = function() {
  return this.setEmbHashesList([]);
};


/**
 * repeated PlotAttribute attributes = 17;
 * @return {!Array<!proto.bc.oland.PlotAttribute>}
 */
proto.bc.oland.Plot.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.bc.oland.PlotAttribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.oland.PlotAttribute, 17));
};


/**
 * @param {!Array<!proto.bc.oland.PlotAttribute>} value
 * @return {!proto.bc.oland.Plot} returns this
*/
proto.bc.oland.Plot.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.bc.oland.PlotAttribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.PlotAttribute}
 */
proto.bc.oland.Plot.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.bc.oland.PlotAttribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * repeated PlotPanel panels = 18;
 * @return {!Array<!proto.bc.oland.PlotPanel>}
 */
proto.bc.oland.Plot.prototype.getPanelsList = function() {
  return /** @type{!Array<!proto.bc.oland.PlotPanel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bc.oland.PlotPanel, 18));
};


/**
 * @param {!Array<!proto.bc.oland.PlotPanel>} value
 * @return {!proto.bc.oland.Plot} returns this
*/
proto.bc.oland.Plot.prototype.setPanelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.bc.oland.PlotPanel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.PlotPanel}
 */
proto.bc.oland.Plot.prototype.addPanels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.bc.oland.PlotPanel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.Plot} returns this
 */
proto.bc.oland.Plot.prototype.clearPanelsList = function() {
  return this.setPanelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.oland.PlotAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.oland.PlotAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.oland.PlotAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.PlotAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: msg.getType_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.oland.PlotAttribute}
 */
proto.bc.oland.PlotAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.oland.PlotAttribute;
  return proto.bc.oland.PlotAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.oland.PlotAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.oland.PlotAttribute}
 */
proto.bc.oland.PlotAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.oland.PlotAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.oland.PlotAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.PlotAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.bc.oland.PlotAttribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.oland.PlotAttribute} returns this
 */
proto.bc.oland.PlotAttribute.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.bc.oland.PlotAttribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bc.oland.PlotAttribute} returns this
 */
proto.bc.oland.PlotAttribute.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes type = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotAttribute.prototype.getType = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes type = 3;
 * This is a type-conversion wrapper around `getType()`
 * @return {string}
 */
proto.bc.oland.PlotAttribute.prototype.getType_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getType()));
};


/**
 * optional bytes type = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getType()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotAttribute.prototype.getType_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getType()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotAttribute} returns this
 */
proto.bc.oland.PlotAttribute.prototype.setType = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bc.oland.PlotPanel.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bc.oland.PlotPanel.prototype.toObject = function(opt_includeInstance) {
  return proto.bc.oland.PlotPanel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bc.oland.PlotPanel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.PlotPanel.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    previousHash: msg.getPreviousHash_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    shardHash: msg.getShardHash_asB64(),
    shardNonce: msg.getShardNonce_asB64(),
    partialProof: msg.getPartialProof_asB64(),
    partialSignature: msg.getPartialSignature_asB64(),
    txCount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    txsList: msg.getTxsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bc.oland.PlotPanel}
 */
proto.bc.oland.PlotPanel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bc.oland.PlotPanel;
  return proto.bc.oland.PlotPanel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bc.oland.PlotPanel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bc.oland.PlotPanel}
 */
proto.bc.oland.PlotPanel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setShardHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setShardNonce(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPartialProof(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPartialSignature(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxCount(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bc.oland.PlotPanel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bc.oland.PlotPanel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bc.oland.PlotPanel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPreviousHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getShardHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getShardNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPartialProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getPartialSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getTxCount();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getTxsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes previous_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getPreviousHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes previous_hash = 2;
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getPreviousHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousHash()));
};


/**
 * optional bytes previous_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousHash()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getPreviousHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setPreviousHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 version = 3;
 * @return {number}
 */
proto.bc.oland.PlotPanel.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes shard_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getShardHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes shard_hash = 4;
 * This is a type-conversion wrapper around `getShardHash()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getShardHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getShardHash()));
};


/**
 * optional bytes shard_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getShardHash()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getShardHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getShardHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setShardHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes shard_nonce = 5;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getShardNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes shard_nonce = 5;
 * This is a type-conversion wrapper around `getShardNonce()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getShardNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getShardNonce()));
};


/**
 * optional bytes shard_nonce = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getShardNonce()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getShardNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getShardNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setShardNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes partial_proof = 6;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getPartialProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes partial_proof = 6;
 * This is a type-conversion wrapper around `getPartialProof()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getPartialProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPartialProof()));
};


/**
 * optional bytes partial_proof = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPartialProof()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getPartialProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPartialProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setPartialProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes partial_signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.bc.oland.PlotPanel.prototype.getPartialSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes partial_signature = 7;
 * This is a type-conversion wrapper around `getPartialSignature()`
 * @return {string}
 */
proto.bc.oland.PlotPanel.prototype.getPartialSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPartialSignature()));
};


/**
 * optional bytes partial_signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPartialSignature()`
 * @return {!Uint8Array}
 */
proto.bc.oland.PlotPanel.prototype.getPartialSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPartialSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setPartialSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 tx_count = 8;
 * @return {number}
 */
proto.bc.oland.PlotPanel.prototype.getTxCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setTxCount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated bytes txs = 9;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bc.oland.PlotPanel.prototype.getTxsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * repeated bytes txs = 9;
 * This is a type-conversion wrapper around `getTxsList()`
 * @return {!Array<string>}
 */
proto.bc.oland.PlotPanel.prototype.getTxsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTxsList()));
};


/**
 * repeated bytes txs = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bc.oland.PlotPanel.prototype.getTxsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTxsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.setTxsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.addTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bc.oland.PlotPanel} returns this
 */
proto.bc.oland.PlotPanel.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


goog.object.extend(exports, proto.bc.oland);
